// This file is auto-generated by @hey-api/openapi-ts

export type success_response = {
  message?: string;
  code?: string;
};

export type error = {
  /**
   * Error code.
   */
  code?: string;
  /**
   * Error message.
   */
  message?: string;
};

export type error_response = {
  errors?: Array<error>;
};

export type not_found_response = {
  errors?: {
    code?: string;
    message?: string;
  };
};

export type get_apis_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  /**
   * Pagination token.
   */
  next_token?: string;
  apis?: Array<{
    /**
     * The unique ID for the API.
     */
    id?: string;
    /**
     * The API’s name.
     */
    name?: string;
    /**
     * A unique identifier for the API - commonly the URL. This value will be used as the `audience` parameter in authorization claims.
     */
    audience?: string;
    /**
     * Whether or not it is the Kinde management API.
     */
    is_management_api?: boolean;
    scopes?: Array<{
      id?: string;
      key?: string;
    }>;
  }>;
};

export type create_apis_response = {
  /**
   * A Kinde generated message.
   */
  message?: string;
  /**
   * A Kinde generated status code.
   */
  code?: string;
  api?: {
    /**
     * The unique ID for the API.
     */
    id?: string;
  };
};

export type create_api_scopes_response = {
  /**
   * A Kinde generated message.
   */
  message?: string;
  /**
   * A Kinde generated status code.
   */
  code?: string;
  scope?: {
    /**
     * The unique ID for the API scope.
     */
    id?: string;
  };
};

export type get_environment_variables_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  /**
   * Whether more records exist.
   */
  has_more?: boolean;
  environment_variables?: Array<environment_variable>;
};

export type get_environment_variable_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  environment_variable?: environment_variable;
};

export type create_environment_variable_response = {
  /**
   * A Kinde generated message.
   */
  message?: string;
  /**
   * A Kinde generated status code.
   */
  code?: string;
  environment_variable?: {
    /**
     * The unique ID for the environment variable.
     */
    id?: string;
  };
};

export type update_environment_variable_response = {
  /**
   * A Kinde generated message.
   */
  message?: string;
  /**
   * A Kinde generated status code.
   */
  code?: string;
};

export type delete_environment_variable_response = {
  /**
   * A Kinde generated message.
   */
  message?: string;
  /**
   * A Kinde generated status code.
   */
  code?: string;
};

export type get_business_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  business?: {
    /**
     * The unique ID for the business.
     */
    code?: string;
    /**
     * Your business's name.
     */
    name?: string;
    /**
     * Phone number associated with business.
     */
    phone?: string | null;
    /**
     * Email address associated with business.
     */
    email?: string | null;
    /**
     * The industry your business is in.
     */
    industry?: string | null;
    /**
     * The timezone your business is in.
     */
    timezone?: string | null;
    /**
     * Your Privacy policy URL.
     */
    privacy_url?: string | null;
    /**
     * Your Terms and Conditions URL.
     */
    terms_url?: string | null;
    /**
     * Whether your business uses clickwrap agreements.
     */
    has_clickwrap?: boolean;
    /**
     * Whether your business shows Kinde branding.
     */
    has_kinde_branding?: boolean;
    /**
     * Date of business creation in ISO 8601 format.
     */
    created_on?: string;
  };
};

export type get_industries_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  industries?: Array<{
    /**
     * The unique key for the industry.
     */
    key?: string;
    /**
     * The display name for the industry.
     */
    name?: string;
  }>;
};

export type get_timezones_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  timezones?: Array<{
    /**
     * The unique key for the timezone.
     */
    key?: string;
    /**
     * The display name for the timezone.
     */
    name?: string;
  }>;
};

export type get_api_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  api?: {
    /**
     * Unique ID of the API.
     */
    id?: string;
    /**
     * The API’s name.
     */
    name?: string;
    /**
     * A unique identifier for the API - commonly the URL. This value will be used as the `audience` parameter in authorization claims.
     */
    audience?: string;
    /**
     * Whether or not it is the Kinde management API.
     */
    is_management_api?: boolean;
    scopes?: Array<{
      /**
       * The ID of the scope.
       */
      id?: string;
      /**
       * The reference key for the scope.
       */
      key?: string;
    }>;
    applications?: Array<{
      /**
       * The Client ID of the application.
       */
      id?: string;
      /**
       * The application's name.
       */
      name?: string;
      /**
       * The application's type.
       */
      type?:
        | "Machine to machine (M2M)"
        | "Back-end web"
        | "Front-end and mobile";
      /**
       * Whether or not the application is authorized to access the API
       */
      is_active?: boolean | null;
    }>;
  };
};

export type get_api_scopes_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  scopes?: Array<{
    /**
     * Unique ID of the API scope.
     */
    id?: string;
    /**
     * The scope's reference key.
     */
    key?: string;
    /**
     * Explanation of the scope purpose.
     */
    description?: string;
  }>;
};

export type get_api_scope_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  scope?: {
    /**
     * Unique ID of the API scope.
     */
    id?: string;
    /**
     * The scope's reference key.
     */
    key?: string;
    /**
     * Explanation of the scope purpose.
     */
    description?: string;
  };
};

export type authorize_app_api_response = {
  message?: string;
  code?: string;
  applications_disconnected?: Array<string>;
  applications_connected?: Array<string>;
};

export type delete_api_response = {
  message?: string;
  code?: string;
};

export type user = {
  /**
   * Unique ID of the user in Kinde.
   */
  id?: string;
  /**
   * External ID for user.
   */
  provided_id?: string;
  /**
   * Default email address of the user in Kinde.
   */
  preferred_email?: string;
  /**
   * User's primary phone number.
   */
  phone?: string;
  /**
   * Primary username of the user in Kinde.
   */
  username?: string;
  /**
   * User's last name.
   */
  last_name?: string;
  /**
   * User's first name.
   */
  first_name?: string;
  /**
   * Whether the user is currently suspended or not.
   */
  is_suspended?: boolean;
  /**
   * User's profile picture URL.
   */
  picture?: string;
  /**
   * Total number of user sign ins.
   */
  total_sign_ins?: number | null;
  /**
   * Number of consecutive failed user sign ins.
   */
  failed_sign_ins?: number | null;
  /**
   * Last sign in date in ISO 8601 format.
   */
  last_signed_in?: string | null;
  /**
   * Date of user creation in ISO 8601 format.
   */
  created_on?: string | null;
  /**
   * Array of organizations a user belongs to.
   */
  organizations?: Array<string>;
  /**
   * Array of identities belonging to the user.
   */
  identities?: Array<{
    type?: string;
    identity?: string;
  }>;
};

export type update_user_response = {
  /**
   * Unique ID of the user in Kinde.
   */
  id?: string;
  /**
   * User's first name.
   */
  given_name?: string;
  /**
   * User's last name.
   */
  family_name?: string;
  /**
   * User's preferred email.
   */
  email?: string;
  /**
   * Whether the user is currently suspended or not.
   */
  is_suspended?: boolean;
  /**
   * Whether a password reset has been requested.
   */
  is_password_reset_requested?: boolean;
  /**
   * User's profile picture URL.
   */
  picture?: string | null;
};

/**
 * Array of users.
 */
export type users = Array<user>;

export type users_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  users?: Array<{
    /**
     * Unique ID of the user in Kinde.
     */
    id?: string;
    /**
     * External ID for user.
     */
    provided_id?: string;
    /**
     * Default email address of the user in Kinde.
     */
    email?: string;
    /**
     * User's primary phone number.
     */
    phone?: string;
    /**
     * Primary username of the user in Kinde.
     */
    username?: string;
    /**
     * User's last name.
     */
    last_name?: string;
    /**
     * User's first name.
     */
    first_name?: string;
    /**
     * Whether the user is currently suspended or not.
     */
    is_suspended?: boolean;
    /**
     * User's profile picture URL.
     */
    picture?: string;
    /**
     * Total number of user sign ins.
     */
    total_sign_ins?: number | null;
    /**
     * Number of consecutive failed user sign ins.
     */
    failed_sign_ins?: number | null;
    /**
     * Last sign in date in ISO 8601 format.
     */
    last_signed_in?: string | null;
    /**
     * Date of user creation in ISO 8601 format.
     */
    created_on?: string | null;
    /**
     * Array of organizations a user belongs to.
     */
    organizations?: Array<string>;
    /**
     * Array of identities belonging to the user.
     */
    identities?: Array<{
      type?: string;
      identity?: string;
    }>;
  }>;
  /**
   * Pagination token.
   */
  next_token?: string;
};

export type search_users_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  results?: Array<{
    /**
     * Unique ID of the user in Kinde.
     */
    id?: string;
    /**
     * External ID for user.
     */
    provided_id?: string | null;
    /**
     * Default email address of the user in Kinde.
     */
    email?: string | null;
    /**
     * Primary username of the user in Kinde.
     */
    username?: string | null;
    /**
     * User's last name.
     */
    last_name?: string;
    /**
     * User's first name.
     */
    first_name?: string;
    /**
     * Whether the user is currently suspended or not.
     */
    is_suspended?: boolean;
    /**
     * User's profile picture URL.
     */
    picture?: string | null;
    /**
     * Total number of user sign ins.
     */
    total_sign_ins?: number | null;
    /**
     * Number of consecutive failed user sign ins.
     */
    failed_sign_ins?: number | null;
    /**
     * Last sign in date in ISO 8601 format.
     */
    last_signed_in?: string | null;
    /**
     * Date of user creation in ISO 8601 format.
     */
    created_on?: string | null;
    /**
     * Array of organizations a user belongs to.
     */
    organizations?: Array<string>;
    /**
     * Array of identities belonging to the user.
     */
    identities?: Array<{
      type?: string;
      identity?: string;
    }>;
    /**
     * The user properties.
     */
    properties?: {
      [key: string]: string;
    };
  }>;
};

export type create_user_response = {
  /**
   * Unique ID of the user in Kinde.
   */
  id?: string;
  /**
   * True if the user was successfully created.
   */
  created?: boolean;
  identities?: Array<user_identity>;
};

export type create_organization_response = {
  /**
   * Response message.
   */
  message?: string;
  /**
   * Response code.
   */
  code?: string;
  organization?: {
    /**
     * The organization's unique code.
     */
    code?: string;
  };
};

export type user_identity = {
  /**
   * The type of identity object created.
   */
  type?: string;
  /**
   * The result of the user creation operation.
   */
  result?: {
    /**
     * True if the user identity was successfully created.
     */
    created?: boolean;
  };
};

export type create_property_response = {
  message?: string;
  code?: string;
  property?: {
    /**
     * The property's ID.
     */
    id?: string;
  };
};

export type create_identity_response = {
  message?: string;
  code?: string;
  identity?: {
    /**
     * The identity's ID.
     */
    id?: string;
  };
};

export type get_identities_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  identities?: Array<identity>;
  /**
   * Whether more records exist.
   */
  has_more?: boolean;
};

export type get_user_mfa_response = {
  message?: string;
  code?: string;
  mfa?: {
    /**
     * The MFA's identifier.
     */
    id?: string;
    /**
     * The type of MFA (e.g. email, SMS, authenticator app).
     */
    type?: string;
    /**
     * The timestamp when the MFA was created.
     */
    created_on?: string;
    /**
     * The identifier used for MFA (e.g. email address, phone number).
     */
    name?: string;
    /**
     * Whether the MFA is verified or not.
     */
    is_verified?: boolean;
    /**
     * The number of times MFA has been used.
     */
    usage_count?: number;
    /**
     * The timestamp when the MFA was last used.
     */
    last_used_on?: string;
  };
};

export type get_properties_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  properties?: Array<property>;
  /**
   * Whether more records exist.
   */
  has_more?: boolean;
};

export type get_property_values_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  properties?: Array<property_value>;
  /**
   * Pagination token.
   */
  next_token?: string;
};

export type create_category_response = {
  message?: string;
  code?: string;
  category?: {
    /**
     * The category's ID.
     */
    id?: string;
  };
};

export type get_categories_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  categories?: Array<category>;
  /**
   * Whether more records exist.
   */
  has_more?: boolean;
};

export type get_event_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  event?: {
    type?: string;
    source?: string;
    event_id?: string;
    /**
     * Timestamp in ISO 8601 format.
     */
    timestamp?: number;
    /**
     * Event specific data object.
     */
    data?: {
      [key: string]: unknown;
    };
  };
};

export type get_event_types_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  event_types?: Array<event_type>;
};

export type get_webhooks_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  webhooks?: Array<webhook>;
};

export type webhook = {
  id?: string;
  name?: string;
  endpoint?: string;
  description?: string;
  event_types?: Array<string>;
  /**
   * Created on date in ISO 8601 format.
   */
  created_on?: string;
};

export type create_webhook_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  webhook?: {
    id?: string;
    endpoint?: string;
  };
};

export type update_webhook_response = {
  message?: string;
  code?: string;
  webhook?: {
    id?: string;
  };
};

export type create_connection_response = {
  message?: string;
  code?: string;
  connection?: {
    /**
     * The connection's ID.
     */
    id?: string;
  };
};

export type get_connections_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  connections?: Array<connection>;
  /**
   * Whether more records exist.
   */
  has_more?: boolean;
};

export type delete_webhook_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
};

export type event_type = {
  id?: string;
  code?: string;
  name?: string;
  origin?: string;
  schema?: {
    [key: string]: unknown;
  };
};

export type organization_item_schema = {
  /**
   * The unique identifier for the organization.
   */
  code?: string;
  /**
   * The organization's name.
   */
  name?: string;
  /**
   * A unique handle for the organization - can be used for dynamic callback urls.
   */
  handle?: string | null;
  /**
   * Whether the organization is the default organization.
   */
  is_default?: boolean;
  /**
   * The organization's external identifier - commonly used when migrating from or mapping to other systems.
   */
  external_id?: string | null;
  /**
   * If users become members of this organization when the org code is supplied during authentication.
   */
  is_auto_membership_enabled?: boolean;
};

export type get_environment_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  environment?: {
    /**
     * The unique identifier for the environment.
     */
    code?: string;
    /**
     * The environment's name.
     */
    name?: string;
    /**
     * Your HotJar site ID.
     */
    hotjar_site_id?: string | null;
    /**
     * Your Google Analytics tag.
     */
    google_analytics_tag?: string | null;
    /**
     * Whether the environment is the default. Typically this is your production environment.
     */
    is_default?: boolean;
    /**
     * Whether the environment is live.
     */
    is_live?: boolean;
    /**
     * Your domain on Kinde
     */
    kinde_domain?: string;
    /**
     * Your custom domain for the environment
     */
    custom_domain?: string | null;
    /**
     * The organization's logo URL.
     */
    logo?: string | null;
    /**
     * The organization's logo URL to be used for dark themes.
     */
    logo_dark?: string | null;
    /**
     * The organization's SVG favicon URL. Optimal format for most browsers
     */
    favicon_svg?: string | null;
    /**
     * The favicon URL to be used as a fallback in browsers that don’t support SVG, add a PNG
     */
    favicon_fallback?: string | null;
    link_color?: {
      raw?: string;
      hex?: string;
      hsl?: string;
    } | null;
    background_color?: {
      raw?: string;
      hex?: string;
      hsl?: string;
    } | null;
    button_color?: {
      raw?: string;
      hex?: string;
      hsl?: string;
    } | null;
    button_text_color?: {
      raw?: string;
      hex?: string;
      hsl?: string;
    } | null;
    link_color_dark?: {
      raw?: string;
      hex?: string;
      hsl?: string;
    } | null;
    background_color_dark?: {
      raw?: string;
      hex?: string;
      hsl?: string;
    } | null;
    button_text_color_dark?: {
      raw?: string;
      hex?: string;
      hsl?: string;
    } | null;
    button_color_dark?: {
      raw?: string;
      hex?: string;
      hsl?: string;
    } | null;
    /**
     * The border radius for buttons. Value is px, Kinde transforms to rem for rendering
     */
    button_border_radius?: number | null;
    /**
     * The border radius for cards. Value is px, Kinde transforms to rem for rendering
     */
    card_border_radius?: number | null;
    /**
     * The border radius for inputs. Value is px, Kinde transforms to rem for rendering
     */
    input_border_radius?: number | null;
    /**
     * Whether the environment is forced into light mode, dark mode or user preference
     */
    theme_code?: "light" | "dark" | "user_preference";
    /**
     * The color scheme for the environment used for meta tags based on the theme code
     */
    color_scheme?: "light" | "dark" | "light dark";
    /**
     * Date of environment creation in ISO 8601 format.
     */
    created_on?: string;
  };
};

/**
 * Whether the environment is forced into light mode, dark mode or user preference
 */
export type theme_code = "light" | "dark" | "user_preference";

/**
 * The color scheme for the environment used for meta tags based on the theme code
 */
export type color_scheme = "light" | "dark" | "light dark";

export type get_organization_response = {
  /**
   * The unique identifier for the organization.
   */
  code?: string;
  /**
   * The organization's name.
   */
  name?: string;
  /**
   * A unique handle for the organization - can be used for dynamic callback urls.
   */
  handle?: string | null;
  /**
   * Whether the organization is the default organization.
   */
  is_default?: boolean;
  /**
   * The organization's external identifier - commonly used when migrating from or mapping to other systems.
   */
  external_id?: string | null;
  /**
   * If users become members of this organization when the org code is supplied during authentication.
   */
  is_auto_membership_enabled?: boolean;
  /**
   * The organization's logo URL.
   */
  logo?: string | null;
  /**
   * The organization's logo URL to be used for dark themes.
   */
  logo_dark?: string | null;
  /**
   * The organization's SVG favicon URL. Optimal format for most browsers
   */
  favicon_svg?: string | null;
  /**
   * The favicon URL to be used as a fallback in browsers that don’t support SVG, add a PNG
   */
  favicon_fallback?: string | null;
  link_color?: {
    raw?: string;
    hex?: string;
    hsl?: string;
  } | null;
  background_color?: {
    raw?: string;
    hex?: string;
    hsl?: string;
  } | null;
  button_color?: {
    raw?: string;
    hex?: string;
    hsl?: string;
  } | null;
  button_text_color?: {
    raw?: string;
    hex?: string;
    hsl?: string;
  } | null;
  link_color_dark?: {
    raw?: string;
    hex?: string;
    hsl?: string;
  } | null;
  background_color_dark?: {
    raw?: string;
    hex?: string;
    hsl?: string;
  } | null;
  button_text_color_dark?: {
    raw?: string;
    hex?: string;
    hsl?: string;
  } | null;
  button_color_dark?: {
    raw?: string;
    hex?: string;
    hsl?: string;
  } | null;
  /**
   * The border radius for buttons. Value is px, Kinde transforms to rem for rendering
   */
  button_border_radius?: number | null;
  /**
   * The border radius for cards. Value is px, Kinde transforms to rem for rendering
   */
  card_border_radius?: number | null;
  /**
   * The border radius for inputs. Value is px, Kinde transforms to rem for rendering
   */
  input_border_radius?: number | null;
  /**
   * Whether the environment is forced into light mode, dark mode or user preference
   */
  theme_code?: "light" | "dark" | "user_preference";
  /**
   * The color scheme for the environment used for meta tags based on the theme code
   */
  color_scheme?: "light" | "dark" | "light dark";
  /**
   * Date of organization creation in ISO 8601 format.
   */
  created_on?: string;
  /**
   * Deprecated - Use 'is_auto_membership_enabled' instead
   * @deprecated
   */
  is_allow_registrations?: boolean | null;
  /**
   * The name of the organization that will be used in emails
   */
  sender_name?: string | null;
  /**
   * The email address that will be used in emails. Requires custom SMTP to be set up.
   */
  sender_email?: string | null;
};

export type organization_user = {
  /**
   * The unique ID for the user.
   */
  id?: string | null;
  /**
   * The user's email address.
   */
  email?: string | null;
  /**
   * The user's full name.
   */
  full_name?: string;
  /**
   * The user's last name.
   */
  last_name?: string | null;
  /**
   * The user's first name.
   */
  first_name?: string | null;
  /**
   * The user's profile picture URL.
   */
  picture?: string | null;
  /**
   * The date the user joined the organization.
   */
  joined_on?: string;
  /**
   * The roles the user has in the organization.
   */
  roles?: Array<string>;
};

export type category = {
  id?: string;
  name?: string;
};

export type connection = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  connection?: {
    id?: string;
    name?: string;
    display_name?: string;
    strategy?: string;
  };
};

export type environment_variable = {
  /**
   * The unique ID for the environment variable.
   */
  id?: string;
  /**
   * The name of the environment variable.
   */
  key?: string;
  /**
   * The value of the environment variable.
   */
  value?: string | null;
  /**
   * Whether the environment variable is sensitive.
   */
  is_secret?: boolean;
  /**
   * The date the environment variable was created.
   */
  created_on?: string;
};

export type identity = {
  id?: string;
  type?: string;
  is_confirmed?: boolean;
  /**
   * Date of user creation in ISO 8601 format.
   */
  created_on?: string;
  /**
   * Date of user creation in ISO 8601 format.
   */
  last_login_on?: string;
  total_logins?: number;
  name?: string;
};

export type property = {
  id?: string;
  key?: string;
  name?: string;
  is_private?: boolean;
  description?: string;
  is_kinde_property?: boolean;
};

export type property_value = {
  id?: string;
  name?: string;
  description?: string | null;
  key?: string;
  value?: string | null;
};

export type role = {
  id?: string;
  key?: string;
  name?: string;
  description?: string;
};

export type subscribers_subscriber = {
  id?: string;
  email?: string;
  full_name?: string;
  first_name?: string;
  last_name?: string;
};

export type subscriber = {
  id?: string;
  preferred_email?: string;
  first_name?: string;
  last_name?: string;
};

export type organization_user_role = {
  id?: string;
  key?: string;
  name?: string;
};

export type organization_user_role_permissions = {
  id?: string;
  role?: string;
  permissions?: {
    key?: string;
  };
};

export type organization_user_permission = {
  id?: string;
  key?: string;
  name?: string;
  description?: string;
  roles?: Array<{
    id?: string;
    key?: string;
  }>;
};

export type organization_users = Array<organization_user>;

export type get_subscriber_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  subscribers?: Array<subscriber>;
};

export type get_subscribers_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  subscribers?: Array<subscribers_subscriber>;
  /**
   * Pagination token.
   */
  next_token?: string;
};

export type get_roles_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  roles?: Array<roles>;
  /**
   * Pagination token.
   */
  next_token?: string;
};

export type get_role_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  role?: {
    /**
     * The role's ID.
     */
    id?: string;
    /**
     * The role identifier to use in code.
     */
    key?: string;
    /**
     * The role's name.
     */
    name?: string;
    /**
     * The role's description.
     */
    description?: string;
    /**
     * Whether the role is the default role.
     */
    is_default_role?: boolean;
  };
};

export type create_roles_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  role?: {
    /**
     * The role's ID.
     */
    id?: string;
  };
};

export type get_organizations_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  organizations?: Array<organization_item_schema>;
  /**
   * Pagination token.
   */
  next_token?: string;
};

export type get_organization_users_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  organization_users?: Array<organization_user>;
  /**
   * Pagination token.
   */
  next_token?: string;
};

export type get_organizations_user_roles_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  roles?: Array<organization_user_role>;
  /**
   * Pagination token.
   */
  next_token?: string;
};

export type get_organizations_user_permissions_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  permissions?: Array<organization_user_permission>;
};

export type get_organization_feature_flags_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  /**
   * The environment's feature flag settings.
   */
  feature_flags?: {
    [key: string]: {
      type?: "str" | "int" | "bool";
      value?: string;
    };
  };
};

export type get_environment_feature_flags_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  /**
   * The environment's feature flag settings.
   */
  feature_flags?: {
    [key: string]: {
      type?: "str" | "int" | "bool";
      value?: string;
    };
  };
  /**
   * Pagination token.
   */
  next_token?: string;
};

export type add_organization_users_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  users_added?: Array<string>;
};

export type update_role_permissions_response = {
  code?: string;
  message?: string;
  permissions_added?: Array<string>;
  permissions_removed?: Array<string>;
};

export type update_organization_users_response = {
  message?: string;
  code?: string;
  users_added?: Array<string>;
  users_updated?: Array<string>;
  users_removed?: Array<string>;
};

export type connected_apps_auth_url = {
  /**
   * A URL that is used to authenticate an end-user against a connected app.
   */
  url?: string;
  /**
   * A unique identifier for the login session.
   */
  session_id?: string;
};

export type create_subscriber_success_response = {
  subscriber?: {
    /**
     * A unique identifier for the subscriber.
     */
    subscriber_id?: string;
  };
};

export type connected_apps_access_token = {
  /**
   * The access token to access a third-party provider.
   */
  access_token?: string;
  /**
   * The date and time that the access token expires.
   */
  access_token_expiry?: string;
};

export type api_result = {
  /**
   * The result of the api operation.
   */
  result?: string;
};

export type create_application_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  application?: {
    /**
     * The application's identifier.
     */
    id?: string;
    /**
     * The application's client ID.
     */
    client_id?: string;
    /**
     * The application's client secret.
     */
    client_secret?: string;
  };
};

export type get_application_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  application?: {
    /**
     * The application's identifier.
     */
    id?: string;
    /**
     * The application's name.
     */
    name?: string;
    /**
     * The application's type.
     */
    type?: "m2m" | "reg" | "spa";
    /**
     * The application's client ID.
     */
    client_id?: string;
    /**
     * The application's client secret.
     */
    client_secret?: string;
    /**
     * The default login route for resolving session issues.
     */
    login_uri?: string;
    /**
     * The homepage link to your application.
     */
    homepage_uri?: string;
    /**
     * Whether the application has a cancel button to allow users to exit the auth flow [Beta].
     */
    has_cancel_button?: boolean;
  };
};

/**
 * The application's type.
 */
export type type = "m2m" | "reg" | "spa";

export type applications = {
  id?: string;
  name?: string;
  type?: string;
};

export type get_applications_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  applications?: Array<applications>;
  /**
   * Pagination token.
   */
  next_token?: string;
};

export type redirect_callback_urls = {
  /**
   * An application's redirect URLs.
   */
  redirect_urls?: Array<string>;
};

export type get_redirect_callback_urls_response = {
  /**
   * An application's redirect callback URLs.
   */
  redirect_urls?: Array<redirect_callback_urls>;
};

export type logout_redirect_urls = {
  /**
   * An application's logout URLs.
   */
  logout_urls?: Array<string>;
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
};

export type get_permissions_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  permissions?: Array<permissions>;
  /**
   * Pagination token.
   */
  next_token?: string;
};

export type permissions = {
  /**
   * The permission's ID.
   */
  id?: string;
  /**
   * The permission identifier to use in code.
   */
  key?: string;
  /**
   * The permission's name.
   */
  name?: string;
  /**
   * The permission's description.
   */
  description?: string;
};

export type roles = {
  /**
   * The role's ID.
   */
  id?: string;
  /**
   * The role identifier to use in code.
   */
  key?: string;
  /**
   * The role's name.
   */
  name?: string;
  /**
   * The role's description.
   */
  description?: string | null;
  /**
   * Whether the role is the default role.
   */
  is_default_role?: boolean;
};

export type role_permissions_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * Response message.
   */
  message?: string;
  permissions?: Array<permissions>;
  /**
   * Pagination token.
   */
  next_token?: string;
};

export type read_logo_response = {
  /**
   * Response code.
   */
  code?: string;
  /**
   * A list of logos.
   */
  logos?: Array<{
    /**
     * The type of logo (light or dark).
     */
    type?: string;
    /**
     * The name of the logo file.
     */
    file_name?: string;
    /**
     * The relative path to the logo file.
     */
    path?: string;
  }>;
  /**
   * Response message.
   */
  message?: string;
};

export type user_profile_v2 = {
  /**
   * Unique ID of the user in Kinde.
   */
  sub?: string;
  /**
   * Value of the user's ID in a third-party system when the user is imported into Kinde.
   */
  provided_id?: string | null;
  /**
   * User's first and last name separated by a space.
   */
  name?: string;
  /**
   * User's first name.
   */
  given_name?: string;
  /**
   * User's last name.
   */
  family_name?: string;
  /**
   * Date the user was last updated at (In Unix time).
   */
  updated_at?: number;
  /**
   * User's email address if available.
   */
  email?: string;
  /**
   * Whether the user's email address has been verified.
   */
  email_verified?: boolean;
  /**
   * URL that point's to the user's picture or avatar
   */
  picture?: string | null;
  /**
   * User's preferred username.
   */
  preferred_username?: string | null;
  /**
   * Unique ID of the user in Kinde
   */
  id?: string;
};

export type token_introspect = {
  /**
   * Indicates the status of the token.
   */
  active?: boolean;
  /**
   * Array of intended token recipients.
   */
  aud?: Array<string>;
  /**
   * Identifier for the requesting client.
   */
  client_id?: string;
  /**
   * Token expiration timestamp.
   */
  exp?: number;
  /**
   * Token issuance timestamp.
   */
  iat?: number;
};

export type token_error_response = {
  /**
   * Error.
   */
  error?: string;
  /**
   * The error description.
   */
  error_description?: string;
};

/**
 * The API's ID.
 */
export type Parameterapi_id = string;

/**
 * The application's ID / client ID.
 */
export type Parameterapplication_id = string;

/**
 * The property's key.
 */
export type Parameterproperty_key = string;

/**
 * The environment variable's ID.
 */
export type Parametervariable_id = string;

export type GetApIsData = {
  /**
   * Specify additional data to retrieve. Use "scopes".
   */
  expand?: "scopes" | null;
};

export type GetApIsResponse = get_apis_response;

export type AddApIsData = {
  requestBody: {
    /**
     * The name of the API. (1-64 characters).
     */
    name: string;
    /**
     * A unique identifier for the API - commonly the URL. This value will be used as the `audience` parameter in authorization claims. (1-64 characters)
     */
    audience: string;
  };
};

export type AddApIsResponse = create_apis_response;

export type GetApiData = {
  /**
   * The API's ID.
   */
  apiId: string;
};

export type GetApiResponse = get_api_response;

export type DeleteApiData = {
  /**
   * The API's ID.
   */
  apiId: string;
};

export type DeleteApiResponse = delete_api_response;

export type GetApiScopesData = {
  /**
   * API ID
   */
  apiId: string;
};

export type GetApiScopesResponse = get_api_scopes_response;

export type AddApiScopeData = {
  /**
   * API ID
   */
  apiId: string;
  requestBody: {
    /**
     * The key reference for the scope (1-64 characters, no white space).
     */
    key: string;
    /**
     * Description of the api scope purpose.
     */
    description?: string;
  };
};

export type AddApiScopeResponse = create_api_scopes_response;

export type GetApiScopeData = {
  /**
   * API ID
   */
  apiId: string;
  /**
   * Scope ID
   */
  scopeId: string;
};

export type GetApiScopeResponse = get_api_scope_response;

export type UpdateApiScopeData = {
  /**
   * API ID
   */
  apiId: string;
  requestBody: {
    /**
     * Description of the api scope purpose.
     */
    description?: string;
  };
  /**
   * Scope ID
   */
  scopeId: string;
};

export type UpdateApiScopeResponse = unknown;

export type DeleteApiScopeData = {
  /**
   * API ID
   */
  apiId: string;
  /**
   * Scope ID
   */
  scopeId: string;
};

export type DeleteApiScopeResponse = unknown;

export type UpdateApiApplicationsData = {
  /**
   * The API's ID.
   */
  apiId: string;
  /**
   * The applications you want to authorize.
   */
  requestBody: {
    applications: Array<{
      /**
       * The application's Client ID.
       */
      id: string;
      /**
       * Optional operation, set to 'delete' to revoke authorization for the application. If not set, the application will be authorized.
       */
      operation?: string;
    }>;
  };
};

export type UpdateApiApplicationsResponse = authorize_app_api_response;

export type AddApiApplicationScopeData = {
  /**
   * API ID
   */
  apiId: string;
  /**
   * Application ID
   */
  applicationId: string;
  /**
   * Scope ID
   */
  scopeId: string;
};

export type AddApiApplicationScopeResponse = unknown;

export type DeleteApiAppliationScopeData = {
  /**
   * API ID
   */
  apiId: string;
  /**
   * Application ID
   */
  applicationId: string;
  /**
   * Scope ID
   */
  scopeId: string;
};

export type DeleteApiAppliationScopeResponse = unknown;

export type GetApplicationsData = {
  /**
   * A string to get the next page of results if there are more results.
   */
  nextToken?: string | null;
  /**
   * Number of results per page. Defaults to 10 if parameter not sent.
   */
  pageSize?: number | null;
  /**
   * Field and order to sort the result by.
   */
  sort?: ("name_asc" | "name_desc") | null;
};

export type GetApplicationsResponse = get_applications_response;

export type CreateApplicationData = {
  requestBody: {
    /**
     * The application's name.
     */
    name: string;
    /**
     * The application's type. Use `reg` for regular server rendered applications, `spa` for single-page applications, and `m2m` for machine-to-machine applications.
     */
    type: "reg" | "spa" | "m2m";
  };
};

export type CreateApplicationResponse = create_application_response;

export type GetApplicationData = {
  /**
   * The identifier for the application.
   */
  applicationId: string;
};

export type GetApplicationResponse = get_application_response;

export type UpdateApplicationData = {
  /**
   * The identifier for the application.
   */
  applicationId: string;
  /**
   * Application details.
   */
  requestBody?: {
    /**
     * The application's name.
     */
    name?: string;
    /**
     * The application's language key.
     */
    language_key?: string;
    /**
     * The application's logout uris.
     */
    logout_uris?: Array<string>;
    /**
     * The application's redirect uris.
     */
    redirect_uris?: Array<string>;
    /**
     * The default login route for resolving session issues.
     */
    login_uri?: string;
    /**
     * The homepage link to your application.
     */
    homepage_uri?: string;
  };
};

export type UpdateApplicationResponse = unknown;

export type DeleteApplicationData = {
  /**
   * The identifier for the application.
   */
  applicationId: string;
};

export type DeleteApplicationResponse = success_response;

export type GetApplicationConnectionsData = {
  /**
   * The identifier/client ID for the application.
   */
  applicationId: string;
};

export type GetApplicationConnectionsResponse = get_connections_response;

export type EnableConnectionData = {
  /**
   * The identifier/client ID for the application.
   */
  applicationId: string;
  /**
   * The identifier for the connection.
   */
  connectionId: string;
};

export type EnableConnectionResponse = unknown;

export type RemoveConnectionData = {
  /**
   * The identifier/client ID for the application.
   */
  applicationId: string;
  /**
   * The identifier for the connection.
   */
  connectionId: string;
};

export type RemoveConnectionResponse = success_response;

export type GetApplicationPropertyValuesData = {
  /**
   * The application's ID / client ID.
   */
  applicationId: string;
};

export type GetApplicationPropertyValuesResponse = get_property_values_response;

export type UpdateApplicationsPropertyData = {
  /**
   * The application's ID / client ID.
   */
  applicationId: string;
  /**
   * The property's key.
   */
  propertyKey: string;
  requestBody: {
    /**
     * The new value for the property
     */
    value: string | boolean;
  };
};

export type UpdateApplicationsPropertyResponse = success_response;

export type UpdateApplicationTokensData = {
  /**
   * The identifier/client ID for the application.
   */
  applicationId: string;
  /**
   * Application tokens.
   */
  requestBody: {
    /**
     * The lifetime of an access token in seconds.
     */
    access_token_lifetime?: number;
    /**
     * The lifetime of a refresh token in seconds.
     */
    refresh_token_lifetime?: number;
    /**
     * The lifetime of an ID token in seconds.
     */
    id_token_lifetime?: number;
    /**
     * The lifetime of an authenticated session in seconds.
     */
    authenticated_session_lifetime?: number;
    /**
     * Enable or disable Hasura mapping.
     */
    is_hasura_mapping_enabled?: boolean;
  };
};

export type UpdateApplicationTokensResponse = success_response;

export type GetBusinessResponse = get_business_response;

export type UpdateBusinessData = {
  /**
   * The business details to update.
   */
  requestBody: {
    /**
     * The name of the business.
     */
    business_name?: string | null;
    /**
     * The email address of the business.
     */
    email?: string | null;
    /**
     * The key of the industry of your business. Can be retrieved from the /industries endpoint.
     */
    industry_key?: string | null;
    /**
     * Whether the business is using clickwrap agreements.
     */
    is_click_wrap?: boolean | null;
    /**
     * Whether the business is showing Kinde branding. Requires a paid plan.
     */
    is_show_kinde_branding?: boolean | null;
    /**
     * The Kinde perk code for the business.
     */
    kinde_perk_code?: string | null;
    /**
     * The phone number of the business.
     */
    phone?: string | null;
    /**
     * The URL to the business's privacy policy.
     */
    privacy_url?: string | null;
    /**
     * The URL to the business's terms of service.
     */
    terms_url?: string | null;
    /**
     * The key of the timezone of your business. Can be retrieved from the /timezones endpoint.
     */
    timezone_key?: string | null;
  };
};

export type UpdateBusinessResponse = success_response;

export type GetIndustriesResponse = get_industries_response;

export type GetTimezonesResponse = get_timezones_response;

export type GetCallbackUrLsData = {
  /**
   * The identifier for the application.
   */
  appId: string;
};

export type GetCallbackUrLsResponse = redirect_callback_urls;

export type AddRedirectCallbackUrLsData = {
  /**
   * The identifier for the application.
   */
  appId: string;
  /**
   * Callback details.
   */
  requestBody: {
    /**
     * Array of callback urls.
     */
    urls?: Array<string>;
  };
};

export type AddRedirectCallbackUrLsResponse = success_response;

export type ReplaceRedirectCallbackUrLsData = {
  /**
   * The identifier for the application.
   */
  appId: string;
  /**
   * Callback details.
   */
  requestBody: {
    /**
     * Array of callback urls.
     */
    urls?: Array<string>;
  };
};

export type ReplaceRedirectCallbackUrLsResponse = success_response;

export type DeleteCallbackUrLsData = {
  /**
   * The identifier for the application.
   */
  appId: string;
  /**
   * Urls to delete, comma separated and url encoded.
   */
  urls: string;
};

export type DeleteCallbackUrLsResponse = success_response;

export type GetLogoutUrLsData = {
  /**
   * The identifier for the application.
   */
  appId: string;
};

export type GetLogoutUrLsResponse = logout_redirect_urls;

export type AddLogoutRedirectUrLsData = {
  /**
   * The identifier for the application.
   */
  appId: string;
  /**
   * Callback details.
   */
  requestBody: {
    /**
     * Array of logout urls.
     */
    urls?: Array<string>;
  };
};

export type AddLogoutRedirectUrLsResponse = success_response;

export type ReplaceLogoutRedirectUrLsData = {
  /**
   * The identifier for the application.
   */
  appId: string;
  /**
   * Callback details.
   */
  requestBody: {
    /**
     * Array of logout urls.
     */
    urls?: Array<string>;
  };
};

export type ReplaceLogoutRedirectUrLsResponse = success_response;

export type DeleteLogoutUrLsData = {
  /**
   * The identifier for the application.
   */
  appId: string;
  /**
   * Urls to delete, comma separated and url encoded.
   */
  urls: string;
};

export type DeleteLogoutUrLsResponse = success_response;

export type GetConnectedAppAuthUrlData = {
  /**
   * The unique key code reference of the connected app to authenticate against.
   */
  keyCodeRef: string;
  /**
   * The code of the Kinde organization that needs to authenticate to the third-party connected app.
   */
  orgCode?: string;
  /**
   * A URL that overrides the default callback URL setup in your connected app configuration
   */
  overrideCallbackUrl?: string;
  /**
   * The id of the user that needs to authenticate to the third-party connected app.
   */
  userId?: string;
};

export type GetConnectedAppAuthUrlResponse = connected_apps_auth_url;

export type GetConnectedAppTokenData = {
  /**
   * The unique sesssion id representing the login session of a user.
   */
  sessionId: string;
};

export type GetConnectedAppTokenResponse = connected_apps_access_token;

export type RevokeConnectedAppTokenData = {
  /**
   * The unique sesssion id representing the login session of a user.
   */
  sessionId: string;
};

export type RevokeConnectedAppTokenResponse = success_response;

export type GetConnectionsData = {
  /**
   * The ID of the connection to end before.
   */
  endingBefore?: string | null;
  /**
   * Number of results per page. Defaults to 10 if parameter not sent.
   */
  pageSize?: number | null;
  /**
   * The ID of the connection to start after.
   */
  startingAfter?: string | null;
};

export type GetConnectionsResponse = get_connections_response;

export type CreateConnectionData = {
  /**
   * Connection details.
   */
  requestBody: {
    /**
     * The internal name of the connection.
     */
    name?: string;
    /**
     * The public facing name of the connection.
     */
    display_name?: string;
    /**
     * The identity provider identifier for the connection.
     */
    strategy?:
      | "oauth2:apple"
      | "oauth2:azure_ad"
      | "oauth2:bitbucket"
      | "oauth2:discord"
      | "oauth2:facebook"
      | "oauth2:github"
      | "oauth2:gitlab"
      | "oauth2:google"
      | "oauth2:linkedin"
      | "oauth2:microsoft"
      | "oauth2:patreon"
      | "oauth2:slack"
      | "oauth2:stripe"
      | "oauth2:twitch"
      | "oauth2:twitter"
      | "oauth2:xero"
      | "saml:custom"
      | "wsfed:azure_ad";
    /**
     * Client IDs of applications in which this connection is to be enabled.
     */
    enabled_applications?: Array<string>;
    options?:
      | {
          /**
           * OAuth client ID.
           */
          client_id?: string;
          /**
           * OAuth client secret.
           */
          client_secret?: string;
          /**
           * Use custom domain callback URL.
           */
          is_use_custom_domain?: boolean;
        }
      | {
          /**
           * Client ID.
           */
          client_id?: string;
          /**
           * Client secret.
           */
          client_secret?: string;
          /**
           * List of domains to limit authentication.
           */
          home_realm_domains?: Array<string>;
          /**
           * Domain for Entra ID.
           */
          entra_id_domain?: string;
          /**
           * Use https://login.windows.net/common instead of a default endpoint.
           */
          is_use_common_endpoint?: boolean;
          /**
           * Sync user profile data with IDP.
           */
          is_sync_user_profile_on_login?: boolean;
          /**
           * Include user group info from MS Entra ID.
           */
          is_retrieve_provider_user_groups?: boolean;
          /**
           * Include additional user profile information.
           */
          is_extended_attributes_required?: boolean;
        }
      | {
          /**
           * List of domains to restrict authentication.
           */
          home_realm_domains?: Array<string>;
          /**
           * SAML Entity ID.
           */
          saml_entity_id?: string;
          /**
           * Assertion Consumer Service URL.
           */
          saml_acs_url?: string;
          /**
           * URL for the IdP metadata.
           */
          saml_idp_metadata_url?: string;
          /**
           * Attribute key for the user’s email.
           */
          saml_email_key_attr?: string;
          /**
           * Attribute key for the user’s first name.
           */
          saml_first_name_key_attr?: string;
          /**
           * Attribute key for the user’s last name.
           */
          saml_last_name_key_attr?: string;
          /**
           * Create user if they don’t exist.
           */
          is_create_missing_user?: boolean;
          /**
           * Certificate for signing SAML requests.
           */
          saml_signing_certificate?: string;
          /**
           * Private key associated with the signing certificate.
           */
          saml_signing_private_key?: string;
        };
  };
};

export type CreateConnectionResponse = create_connection_response;

export type GetConnectionData = {
  /**
   * The unique identifier for the connection.
   */
  connectionId: string;
};

export type GetConnectionResponse = connection;

export type UpdateConnectionData = {
  /**
   * The unique identifier for the connection.
   */
  connectionId: string;
  /**
   * The fields of the connection to update.
   */
  requestBody: {
    /**
     * The internal name of the connection.
     */
    name?: string;
    /**
     * The public facing name of the connection.
     */
    display_name?: string;
    /**
     * Client IDs of applications in which this connection is to be enabled.
     */
    enabled_applications?: Array<string>;
    options?:
      | {
          /**
           * OAuth client ID.
           */
          client_id?: string;
          /**
           * OAuth client secret.
           */
          client_secret?: string;
          /**
           * Use custom domain callback URL.
           */
          is_use_custom_domain?: boolean;
        }
      | {
          /**
           * Client ID.
           */
          client_id?: string;
          /**
           * Client secret.
           */
          client_secret?: string;
          /**
           * List of domains to limit authentication.
           */
          home_realm_domains?: Array<string>;
          /**
           * Domain for Entra ID.
           */
          entra_id_domain?: string;
          /**
           * Use https://login.windows.net/common instead of a default endpoint.
           */
          is_use_common_endpoint?: boolean;
          /**
           * Sync user profile data with IDP.
           */
          is_sync_user_profile_on_login?: boolean;
          /**
           * Include user group info from MS Entra ID.
           */
          is_retrieve_provider_user_groups?: boolean;
          /**
           * Include additional user profile information.
           */
          is_extended_attributes_required?: boolean;
        }
      | {
          /**
           * List of domains to restrict authentication.
           */
          home_realm_domains?: Array<string>;
          /**
           * SAML Entity ID.
           */
          saml_entity_id?: string;
          /**
           * Assertion Consumer Service URL.
           */
          saml_acs_url?: string;
          /**
           * URL for the IdP metadata.
           */
          saml_idp_metadata_url?: string;
          /**
           * Attribute key for the user’s email.
           */
          saml_email_key_attr?: string;
          /**
           * Attribute key for the user’s first name.
           */
          saml_first_name_key_attr?: string;
          /**
           * Attribute key for the user’s last name.
           */
          saml_last_name_key_attr?: string;
          /**
           * Create user if they don’t exist.
           */
          is_create_missing_user?: boolean;
          /**
           * Certificate for signing SAML requests.
           */
          saml_signing_certificate?: string;
          /**
           * Private key associated with the signing certificate.
           */
          saml_signing_private_key?: string;
        };
  };
};

export type UpdateConnectionResponse = success_response;

export type ReplaceConnectionData = {
  /**
   * The unique identifier for the connection.
   */
  connectionId: string;
  /**
   * The complete connection configuration to replace the existing one.
   */
  requestBody: {
    /**
     * The internal name of the connection.
     */
    name?: string;
    /**
     * The public-facing name of the connection.
     */
    display_name?: string;
    /**
     * Client IDs of applications in which this connection is to be enabled.
     */
    enabled_applications?: Array<string>;
    options?:
      | {
          /**
           * OAuth client ID.
           */
          client_id?: string;
          /**
           * OAuth client secret.
           */
          client_secret?: string;
          /**
           * Use custom domain callback URL.
           */
          is_use_custom_domain?: boolean;
        }
      | {
          /**
           * Client ID.
           */
          client_id?: string;
          /**
           * Client secret.
           */
          client_secret?: string;
          /**
           * List of domains to limit authentication.
           */
          home_realm_domains?: Array<string>;
          /**
           * Domain for Entra ID.
           */
          entra_id_domain?: string;
          /**
           * Use https://login.windows.net/common instead of a default endpoint.
           */
          is_use_common_endpoint?: boolean;
          /**
           * Sync user profile data with IDP.
           */
          is_sync_user_profile_on_login?: boolean;
          /**
           * Include user group info from MS Entra ID.
           */
          is_retrieve_provider_user_groups?: boolean;
          /**
           * Include additional user profile information.
           */
          is_extended_attributes_required?: boolean;
        }
      | {
          /**
           * List of domains to restrict authentication.
           */
          home_realm_domains?: Array<string>;
          /**
           * SAML Entity ID.
           */
          saml_entity_id?: string;
          /**
           * Assertion Consumer Service URL.
           */
          saml_acs_url?: string;
          /**
           * URL for the IdP metadata.
           */
          saml_idp_metadata_url?: string;
          /**
           * Attribute key for the user’s email.
           */
          saml_email_key_attr?: string;
          /**
           * Attribute key for the user’s first name.
           */
          saml_first_name_key_attr?: string;
          /**
           * Attribute key for the user’s last name.
           */
          saml_last_name_key_attr?: string;
          /**
           * Create user if they don’t exist.
           */
          is_create_missing_user?: boolean;
          /**
           * Certificate for signing SAML requests.
           */
          saml_signing_certificate?: string;
          /**
           * Private key associated with the signing certificate.
           */
          saml_signing_private_key?: string;
        };
  };
};

export type ReplaceConnectionResponse = success_response;

export type DeleteConnectionData = {
  /**
   * The identifier for the connection.
   */
  connectionId: string;
};

export type DeleteConnectionResponse = success_response;

export type GetEnvironmentResponse = get_environment_response;

export type DeleteEnvironementFeatureFlagOverridesResponse = success_response;

export type GetEnvironementFeatureFlagsResponse =
  get_environment_feature_flags_response;

export type DeleteEnvironementFeatureFlagOverrideData = {
  /**
   * The identifier for the feature flag.
   */
  featureFlagKey: string;
};

export type DeleteEnvironementFeatureFlagOverrideResponse = success_response;

export type UpdateEnvironementFeatureFlagOverrideData = {
  /**
   * The identifier for the feature flag.
   */
  featureFlagKey: string;
  /**
   * Flag details.
   */
  requestBody: {
    /**
     * The flag override value.
     */
    value: string;
  };
};

export type UpdateEnvironementFeatureFlagOverrideResponse = success_response;

export type GetEnvironmentVariablesResponse =
  get_environment_variables_response;

export type CreateEnvironmentVariableData = {
  /**
   * The environment variable details.
   */
  requestBody: {
    /**
     * The name of the environment variable (max 128 characters).
     */
    key: string;
    /**
     * The value of the new environment variable (max 2048 characters).
     */
    value: string;
    /**
     * Whether the environment variable is sensitive. Secrets are not-readable by you or your team after creation.
     */
    is_secret?: boolean;
  };
};

export type CreateEnvironmentVariableResponse =
  create_environment_variable_response;

export type GetEnvironmentVariableData = {
  /**
   * The environment variable's ID.
   */
  variableId: string;
};

export type GetEnvironmentVariableResponse = get_environment_variable_response;

export type UpdateEnvironmentVariableData = {
  /**
   * The new details for the environment variable
   */
  requestBody: {
    /**
     * The key to update.
     */
    key?: string;
    /**
     * The new value for the environment variable.
     */
    value?: string;
    /**
     * Whether the environment variable is sensitive. Secret variables are not-readable by you or your team after creation.
     */
    is_secret?: boolean;
  };
  /**
   * The environment variable's ID.
   */
  variableId: string;
};

export type UpdateEnvironmentVariableResponse =
  update_environment_variable_response;

export type DeleteEnvironmentVariableData = {
  /**
   * The environment variable's ID.
   */
  variableId: string;
};

export type DeleteEnvironmentVariableResponse =
  delete_environment_variable_response;

export type CreateFeatureFlagData = {
  /**
   * Flag details.
   */
  requestBody: {
    /**
     * The name of the flag.
     */
    name: string;
    /**
     * Description of the flag purpose.
     */
    description?: string;
    /**
     * The flag identifier to use in code.
     */
    key: string;
    /**
     * The variable type.
     */
    type: "str" | "int" | "bool";
    /**
     * Allow the flag to be overridden at a different level.
     */
    allow_override_level?: "env" | "org" | "usr";
    /**
     * Default value for the flag used by environments and organizations.
     */
    default_value: string;
  };
};

export type CreateFeatureFlagResponse = success_response;

export type DeleteFeatureFlagData = {
  /**
   * The identifier for the feature flag.
   */
  featureFlagKey: string;
};

export type DeleteFeatureFlagResponse = success_response;

export type UpdateFeatureFlagData = {
  /**
   * Allow the flag to be overridden at a different level.
   */
  allowOverrideLevel: "env" | "org";
  /**
   * Default value for the flag used by environments and organizations.
   */
  defaultValue: string;
  /**
   * Description of the flag purpose.
   */
  description: string;
  /**
   * The key identifier for the feature flag.
   */
  featureFlagKey: string;
  /**
   * The name of the flag.
   */
  name: string;
  /**
   * The variable type
   */
  type: "str" | "int" | "bool";
};

export type UpdateFeatureFlagResponse = success_response;

export type GetIdentityData = {
  /**
   * The unique identifier for the identity.
   */
  identityId: string;
};

export type GetIdentityResponse = identity;

export type UpdateIdentityData = {
  /**
   * The unique identifier for the identity.
   */
  identityId: string;
  /**
   * The fields of the identity to update.
   */
  requestBody: {
    /**
     * Whether the identity is the primary for it's type
     */
    is_primary?: boolean;
  };
};

export type UpdateIdentityResponse = success_response;

export type DeleteIdentityData = {
  /**
   * The unique identifier for the identity.
   */
  identityId: string;
};

export type DeleteIdentityResponse = success_response;

export type ReplaceMfaData = {
  /**
   * MFA details.
   */
  requestBody: {
    /**
     * Specifies whether MFA is required, optional, or not enforced.
     */
    policy: "required" | "off" | "optional";
    /**
     * The MFA methods to enable.
     */
    enabled_factors: Array<"mfa:email" | "mfa:sms" | "mfa:authenticator_app">;
  };
};

export type ReplaceMfaResponse = success_response;

export type GetOrganizationData = {
  /**
   * The organization's code.
   */
  code?: string;
};

export type GetOrganizationResponse = get_organization_response;

export type CreateOrganizationData = {
  /**
   * Organization details.
   */
  requestBody: {
    /**
     * The organization's name.
     */
    name: string;
    /**
     * The organization's feature flag settings.
     */
    feature_flags?: {
      [key: string]: "str" | "int" | "bool";
    };
    /**
     * The organization's external identifier - commonly used when migrating from or mapping to other systems.
     */
    external_id?: string;
    /**
     * The organization's brand settings - background color.
     */
    background_color?: string;
    /**
     * The organization's brand settings - button color.
     */
    button_color?: string;
    /**
     * The organization's brand settings - button text color.
     */
    button_text_color?: string;
    /**
     * The organization's brand settings - link color.
     */
    link_color?: string;
    /**
     * The organization's brand settings - dark mode background color.
     */
    background_color_dark?: string;
    /**
     * The organization's brand settings - dark mode button color.
     */
    button_color_dark?: string;
    /**
     * The organization's brand settings - dark mode button text color.
     */
    button_text_color_dark?: string;
    /**
     * The organization's brand settings - dark mode link color.
     */
    link_color_dark?: string;
    /**
     * The organization's brand settings - theme/mode 'light' | 'dark' | 'user_preference'.
     */
    theme_code?: string;
    /**
     * A unique handle for the organization - can be used for dynamic callback urls.
     */
    handle?: string;
    /**
     * If users become members of this organization when the org code is supplied during authentication.
     */
    is_allow_registrations?: boolean;
    /**
     * Enable custom auth connections for this organization.
     */
    is_custom_auth_connections_enabled?: boolean;
    /**
     * The name of the organization that will be used in emails
     */
    sender_name?: string | null;
    /**
     * The email address that will be used in emails. Requires custom SMTP to be set up.
     */
    sender_email?: string | null;
  };
};

export type CreateOrganizationResponse = create_organization_response;

export type GetOrganizationsData = {
  /**
   * A string to get the next page of results if there are more results.
   */
  nextToken?: string | null;
  /**
   * Number of results per page. Defaults to 10 if parameter not sent.
   */
  pageSize?: number | null;
  /**
   * Field and order to sort the result by.
   */
  sort?: ("name_asc" | "name_desc" | "email_asc" | "email_desc") | null;
};

export type GetOrganizationsResponse = get_organizations_response;

export type UpdateOrganizationData = {
  /**
   * The identifier for the organization.
   */
  orgCode: string;
  /**
   * Organization details.
   */
  requestBody?: {
    /**
     * The organization's name.
     */
    name?: string;
    /**
     * The organization's ID.
     */
    external_id?: string;
    /**
     * The organization's brand settings - background color.
     */
    background_color?: string;
    /**
     * The organization's brand settings - button color.
     */
    button_color?: string;
    /**
     * The organization's brand settings - button text color.
     */
    button_text_color?: string;
    /**
     * The organization's brand settings - link color.
     */
    link_color?: string;
    /**
     * The organization's brand settings - dark mode background color.
     */
    background_color_dark?: string;
    /**
     * The organization's brand settings - dark mode button color.
     */
    button_color_dark?: string;
    /**
     * The organization's brand settings - dark mode button text color.
     */
    button_text_color_dark?: string;
    /**
     * The organization's brand settings - dark mode link color.
     */
    link_color_dark?: string;
    /**
     * The organization's brand settings - theme/mode.
     */
    theme_code?: "light" | "dark" | "user_preference";
    /**
     * The organization's handle.
     */
    handle?: string;
    /**
     * Deprecated - Use 'is_auto_membership_enabled' instead.
     * @deprecated
     */
    is_allow_registrations?: boolean;
    /**
     * Enable custom auth connections for this organization.
     */
    is_custom_auth_connections_enabled?: boolean;
    /**
     * Users can sign up to this organization.
     */
    is_auto_join_domain_list?: boolean;
    /**
     * Domains allowed for self-sign up to this environment.
     */
    allowed_domains?: Array<string>;
    /**
     * Activate advanced organization features.
     */
    is_enable_advanced_orgs?: boolean;
    /**
     * Enforce MFA for all users in this organization.
     */
    is_enforce_mfa?: boolean;
    /**
     * The name of the organization that will be used in emails
     */
    sender_name?: string | null;
    /**
     * The email address that will be used in emails. Requires custom SMTP to be set up.
     */
    sender_email?: string | null;
  };
};

export type UpdateOrganizationResponse = success_response;

export type DeleteOrganizationData = {
  /**
   * The identifier for the organization.
   */
  orgCode: string;
};

export type DeleteOrganizationResponse = success_response;

export type GetOrganizationUsersData = {
  /**
   * A string to get the next page of results if there are more results.
   */
  nextToken?: string | null;
  /**
   * The organization's code.
   */
  orgCode: string;
  /**
   * Number of results per page. Defaults to 10 if parameter not sent.
   */
  pageSize?: number | null;
  /**
   * Filter by user permissions comma separated (where all match)
   */
  permissions?: string;
  /**
   * Filter by user roles comma separated (where all match)
   */
  roles?: string;
  /**
   * Field and order to sort the result by.
   */
  sort?:
    | (
        | "name_asc"
        | "name_desc"
        | "email_asc"
        | "email_desc"
        | "id_asc"
        | "id_desc"
      )
    | null;
};

export type GetOrganizationUsersResponse = get_organization_users_response;

export type AddOrganizationUsersData = {
  /**
   * The organization's code.
   */
  orgCode: string;
  requestBody?: {
    /**
     * Users to be added to the organization.
     */
    users?: Array<{
      /**
       * The users id.
       */
      id?: string;
      /**
       * Role keys to assign to the user.
       */
      roles?: Array<string>;
      /**
       * Permission keys to assign to the user.
       */
      permissions?: Array<string>;
    }>;
  };
};

export type AddOrganizationUsersResponse =
  add_organization_users_response | void;

export type UpdateOrganizationUsersData = {
  /**
   * The organization's code.
   */
  orgCode: string;
  requestBody?: {
    /**
     * Users to add, update or remove from the organization.
     */
    users?: Array<{
      /**
       * The users id.
       */
      id?: string;
      /**
       * Optional operation, set to 'delete' to remove the user from the organization.
       */
      operation?: string;
      /**
       * Role keys to assign to the user.
       */
      roles?: Array<string>;
      /**
       * Permission keys to assign to the user.
       */
      permissions?: Array<string>;
    }>;
  };
};

export type UpdateOrganizationUsersResponse =
  update_organization_users_response;

export type GetOrganizationUserRolesData = {
  /**
   * The organization's code.
   */
  orgCode: string;
  /**
   * The user's id.
   */
  userId: string;
};

export type GetOrganizationUserRolesResponse =
  get_organizations_user_roles_response;

export type CreateOrganizationUserRoleData = {
  /**
   * The organization's code.
   */
  orgCode: string;
  /**
   * Role details.
   */
  requestBody: {
    /**
     * The role id.
     */
    role_id?: string;
  };
  /**
   * The user's id.
   */
  userId: string;
};

export type CreateOrganizationUserRoleResponse = success_response;

export type DeleteOrganizationUserRoleData = {
  /**
   * The organization's code.
   */
  orgCode: string;
  /**
   * The role id.
   */
  roleId: string;
  /**
   * The user's id.
   */
  userId: string;
};

export type DeleteOrganizationUserRoleResponse = success_response;

export type GetOrganizationUserPermissionsData = {
  /**
   * Specify additional data to retrieve. Use "roles".
   */
  expand?: string | null;
  /**
   * The organization's code.
   */
  orgCode: string;
  /**
   * The user's id.
   */
  userId: string;
};

export type GetOrganizationUserPermissionsResponse =
  get_organizations_user_permissions_response;

export type CreateOrganizationUserPermissionData = {
  /**
   * The organization's code.
   */
  orgCode: string;
  /**
   * Permission details.
   */
  requestBody: {
    /**
     * The permission id.
     */
    permission_id?: string;
  };
  /**
   * The user's id.
   */
  userId: string;
};

export type CreateOrganizationUserPermissionResponse = success_response;

export type DeleteOrganizationUserPermissionData = {
  /**
   * The organization's code.
   */
  orgCode: string;
  /**
   * The permission id.
   */
  permissionId: string;
  /**
   * The user's id.
   */
  userId: string;
};

export type DeleteOrganizationUserPermissionResponse = success_response;

export type RemoveOrganizationUserData = {
  /**
   * The organization's code.
   */
  orgCode: string;
  /**
   * The user's id.
   */
  userId: string;
};

export type RemoveOrganizationUserResponse = success_response;

export type AddOrganizationUserApiScopeData = {
  /**
   * API ID
   */
  apiId: string;
  /**
   * The identifier for the organization.
   */
  orgCode: string;
  /**
   * Scope ID
   */
  scopeId: string;
  /**
   * User ID
   */
  userId: string;
};

export type AddOrganizationUserApiScopeResponse = unknown;

export type DeleteOrganizationUserApiScopeData = {
  /**
   * API ID
   */
  apiId: string;
  /**
   * The identifier for the organization.
   */
  orgCode: string;
  /**
   * Scope ID
   */
  scopeId: string;
  /**
   * User ID
   */
  userId: string;
};

export type DeleteOrganizationUserApiScopeResponse = unknown;

export type GetOrgUserMfaData = {
  /**
   * The identifier for the organization.
   */
  orgCode: string;
  /**
   * The identifier for the user
   */
  userId: string;
};

export type GetOrgUserMfaResponse = get_user_mfa_response;

export type ResetOrgUserMfaData = {
  /**
   * The identifier for the MFA factor
   */
  factorId: string;
  /**
   * The identifier for the organization.
   */
  orgCode: string;
  /**
   * The identifier for the user
   */
  userId: string;
};

export type ResetOrgUserMfaResponse = success_response;

export type GetOrganizationFeatureFlagsData = {
  /**
   * The identifier for the organization.
   */
  orgCode: string;
};

export type GetOrganizationFeatureFlagsResponse =
  get_organization_feature_flags_response;

export type DeleteOrganizationFeatureFlagOverridesData = {
  /**
   * The identifier for the organization.
   */
  orgCode: string;
};

export type DeleteOrganizationFeatureFlagOverridesResponse = success_response;

export type DeleteOrganizationFeatureFlagOverrideData = {
  /**
   * The identifier for the feature flag.
   */
  featureFlagKey: string;
  /**
   * The identifier for the organization.
   */
  orgCode: string;
};

export type DeleteOrganizationFeatureFlagOverrideResponse = success_response;

export type UpdateOrganizationFeatureFlagOverrideData = {
  /**
   * The identifier for the feature flag
   */
  featureFlagKey: string;
  /**
   * The identifier for the organization
   */
  orgCode: string;
  /**
   * Override value
   */
  value: string;
};

export type UpdateOrganizationFeatureFlagOverrideResponse = success_response;

export type UpdateOrganizationPropertyData = {
  /**
   * The identifier for the organization
   */
  orgCode: string;
  /**
   * The identifier for the property
   */
  propertyKey: string;
  /**
   * The new property value
   */
  value: string;
};

export type UpdateOrganizationPropertyResponse = success_response;

export type GetOrganizationPropertyValuesData = {
  /**
   * The organization's code.
   */
  orgCode: string;
};

export type GetOrganizationPropertyValuesResponse =
  get_property_values_response;

export type UpdateOrganizationPropertiesData = {
  /**
   * The identifier for the organization
   */
  orgCode: string;
  /**
   * Properties to update.
   */
  requestBody: {
    /**
     * Property keys and values
     */
    properties: {
      [key: string]: unknown;
    };
  };
};

export type UpdateOrganizationPropertiesResponse = success_response;

export type ReplaceOrganizationMfaData = {
  /**
   * The identifier for the organization
   */
  orgCode: string;
  /**
   * MFA details.
   */
  requestBody: {
    /**
     * The MFA methods to enable.
     */
    enabled_factors: Array<"mfa:email" | "mfa:sms" | "mfa:authenticator_app">;
  };
};

export type ReplaceOrganizationMfaResponse = success_response;

export type DeleteOrganizationHandleData = {
  /**
   * The organization's code.
   */
  orgCode: string;
};

export type DeleteOrganizationHandleResponse = success_response;

export type ReadOrganizationLogoData = {
  /**
   * The organization's code.
   */
  orgCode: string;
};

export type ReadOrganizationLogoResponse = read_logo_response;

export type AddOrganizationLogoData = {
  /**
   * Organization logo details.
   */
  formData: {
    /**
     * The logo file to upload.
     */
    logo: Blob | File;
  };
  /**
   * The organization's code.
   */
  orgCode: string;
  /**
   * The type of logo to add.
   */
  type: "dark" | "light";
};

export type AddOrganizationLogoResponse = success_response;

export type DeleteOrganizationLogoData = {
  /**
   * The organization's code.
   */
  orgCode: string;
  /**
   * The type of logo to delete.
   */
  type: "dark" | "light";
};

export type DeleteOrganizationLogoResponse = success_response;

export type GetOrganizationConnectionsData = {
  /**
   * The organization code.
   */
  organizationCode: string;
};

export type GetOrganizationConnectionsResponse = get_connections_response;

export type EnableOrgConnectionData = {
  /**
   * The identifier for the connection.
   */
  connectionId: string;
  /**
   * The unique code for the organization.
   */
  organizationCode: string;
};

export type EnableOrgConnectionResponse = unknown;

export type RemoveOrgConnectionData = {
  /**
   * The identifier for the connection.
   */
  connectionId: string;
  /**
   * The unique code for the organization.
   */
  organizationCode: string;
};

export type RemoveOrgConnectionResponse = success_response;

export type GetPermissionsData = {
  /**
   * A string to get the next page of results if there are more results.
   */
  nextToken?: string | null;
  /**
   * Number of results per page. Defaults to 10 if parameter not sent.
   */
  pageSize?: number | null;
  /**
   * Field and order to sort the result by.
   */
  sort?: ("name_asc" | "name_desc" | "id_asc" | "id_desc") | null;
};

export type GetPermissionsResponse = get_permissions_response;

export type CreatePermissionData = {
  /**
   * Permission details.
   */
  requestBody?: {
    /**
     * The permission's name.
     */
    name?: string;
    /**
     * The permission's description.
     */
    description?: string;
    /**
     * The permission identifier to use in code.
     */
    key?: string;
  };
};

export type CreatePermissionResponse = success_response;

export type UpdatePermissionsData = {
  /**
   * The identifier for the permission.
   */
  permissionId: string;
  /**
   * Permission details.
   */
  requestBody?: {
    /**
     * The permission's name.
     */
    name?: string;
    /**
     * The permission's description.
     */
    description?: string;
    /**
     * The permission identifier to use in code.
     */
    key?: string;
  };
};

export type UpdatePermissionsResponse = success_response;

export type DeletePermissionData = {
  /**
   * The identifier for the permission.
   */
  permissionId: string;
};

export type DeletePermissionResponse = success_response;

export type GetPropertiesData = {
  /**
   * Filter results by user,  organization or application context
   */
  context?: ("usr" | "org" | "app") | null;
  /**
   * The ID of the property to end before.
   */
  endingBefore?: string | null;
  /**
   * Number of results per page. Defaults to 10 if parameter not sent.
   */
  pageSize?: number | null;
  /**
   * The ID of the property to start after.
   */
  startingAfter?: string | null;
};

export type GetPropertiesResponse = get_properties_response;

export type CreatePropertyData = {
  /**
   * Property details.
   */
  requestBody: {
    /**
     * The name of the property.
     */
    name: string;
    /**
     * Description of the property purpose.
     */
    description?: string;
    /**
     * The property identifier to use in code.
     */
    key: string;
    /**
     * The property type.
     */
    type: "single_line_text" | "multi_line_text";
    /**
     * The context that the property applies to.
     */
    context: "org" | "usr" | "app";
    /**
     * Whether the property can be included in id and access tokens.
     */
    is_private: boolean;
    /**
     * Which category the property belongs to.
     */
    category_id: string;
  };
};

export type CreatePropertyResponse = create_property_response;

export type UpdatePropertyData = {
  /**
   * The unique identifier for the property.
   */
  propertyId: string;
  /**
   * The fields of the property to update.
   */
  requestBody: {
    /**
     * The name of the property.
     */
    name: string;
    /**
     * Description of the property purpose.
     */
    description?: string;
    /**
     * Whether the property can be included in id and access tokens.
     */
    is_private: boolean;
    /**
     * Which category the property belongs to.
     */
    category_id: string;
  };
};

export type UpdatePropertyResponse = success_response;

export type DeletePropertyData = {
  /**
   * The unique identifier for the property.
   */
  propertyId: string;
};

export type DeletePropertyResponse = success_response;

export type GetCategoriesData = {
  /**
   * Filter the results by User or Organization context
   */
  context?: ("usr" | "org") | null;
  /**
   * The ID of the category to end before.
   */
  endingBefore?: string | null;
  /**
   * Number of results per page. Defaults to 10 if parameter not sent.
   */
  pageSize?: number | null;
  /**
   * The ID of the category to start after.
   */
  startingAfter?: string | null;
};

export type GetCategoriesResponse = get_categories_response;

export type CreateCategoryData = {
  /**
   * Category details.
   */
  requestBody: {
    /**
     * The name of the category.
     */
    name: string;
    /**
     * The context that the category applies to.
     */
    context: "org" | "usr" | "app";
  };
};

export type CreateCategoryResponse = create_category_response;

export type UpdateCategoryData = {
  /**
   * The unique identifier for the category.
   */
  categoryId: string;
  /**
   * The fields of the category to update.
   */
  requestBody: {
    /**
     * The name of the category.
     */
    name?: string;
  };
};

export type UpdateCategoryResponse = success_response;

export type GetRolesData = {
  /**
   * A string to get the next page of results if there are more results.
   */
  nextToken?: string | null;
  /**
   * Number of results per page. Defaults to 10 if parameter not sent.
   */
  pageSize?: number | null;
  /**
   * Field and order to sort the result by.
   */
  sort?: ("name_asc" | "name_desc" | "id_asc" | "id_desc") | null;
};

export type GetRolesResponse = get_roles_response;

export type CreateRoleData = {
  /**
   * Role details.
   */
  requestBody?: {
    /**
     * The role's name.
     */
    name?: string;
    /**
     * The role's description.
     */
    description?: string;
    /**
     * The role identifier to use in code.
     */
    key?: string;
    /**
     * Set role as default for new users.
     */
    is_default_role?: boolean;
  };
};

export type CreateRoleResponse = create_roles_response;

export type GetRoleData = {
  /**
   * The identifier for the role.
   */
  roleId: string;
};

export type GetRoleResponse = get_role_response;

export type UpdateRolesData = {
  /**
   * Role details.
   */
  requestBody?: {
    /**
     * The role's name.
     */
    name: string;
    /**
     * The role's description.
     */
    description?: string;
    /**
     * The role identifier to use in code.
     */
    key: string;
    /**
     * Set role as default for new users.
     */
    is_default_role?: boolean;
  };
  /**
   * The identifier for the role.
   */
  roleId: string;
};

export type UpdateRolesResponse = success_response;

export type DeleteRoleData = {
  /**
   * The identifier for the role.
   */
  roleId: string;
};

export type DeleteRoleResponse = success_response;

export type GetRolePermissionsData = {
  /**
   * A string to get the next page of results if there are more results.
   */
  nextToken?: string | null;
  /**
   * Number of results per page. Defaults to 10 if parameter not sent.
   */
  pageSize?: number | null;
  /**
   * The role's public id.
   */
  roleId: string;
  /**
   * Field and order to sort the result by.
   */
  sort?: ("name_asc" | "name_desc" | "id_asc" | "id_desc") | null;
};

export type GetRolePermissionsResponse = role_permissions_response;

export type UpdateRolePermissionsData = {
  requestBody: {
    /**
     * Permissions to add or remove from the role.
     */
    permissions?: Array<{
      /**
       * The permission id.
       */
      id?: string;
      /**
       * Optional operation, set to 'delete' to remove the permission from the role.
       */
      operation?: string;
    }>;
  };
  /**
   * The identifier for the role.
   */
  roleId: string;
};

export type UpdateRolePermissionsResponse = update_role_permissions_response;

export type RemoveRolePermissionData = {
  /**
   * The permission's public id.
   */
  permissionId: string;
  /**
   * The role's public id.
   */
  roleId: string;
};

export type RemoveRolePermissionResponse = success_response;

export type SearchUsersData = {
  /**
   * The ID of the user to end before.
   */
  endingBefore?: string | null;
  /**
   * Specify additional data to retrieve. Use "organizations" and/or "identities".
   */
  expand?: string | null;
  /**
   * Number of results per page. Defaults to 10 if parameter not sent.
   */
  pageSize?: number | null;
  properties?: {
    [key: string]: Array<string>;
  };
  /**
   * Search the users by email or name. Use '*' to search all.
   */
  query?: string | null;
  /**
   * The ID of the user to start after.
   */
  startingAfter?: string | null;
};

export type SearchUsersResponse = search_users_response;

export type GetSubscribersData = {
  /**
   * A string to get the next page of results if there are more results.
   */
  nextToken?: string | null;
  /**
   * Number of results per page. Defaults to 10 if parameter not sent.
   */
  pageSize?: number | null;
  /**
   * Field and order to sort the result by.
   */
  sort?: ("name_asc" | "name_desc" | "email_asc" | "email_desc") | null;
};

export type GetSubscribersResponse = get_subscribers_response;

export type CreateSubscriberData = {
  /**
   * The email address of the subscriber.
   */
  email: string | null;
  /**
   * Subscriber's first name.
   */
  firstName: string;
  /**
   * Subscriber's last name.
   */
  lastName: string | null;
};

export type CreateSubscriberResponse = create_subscriber_success_response;

export type GetSubscriberData = {
  /**
   * The subscriber's id.
   */
  subscriberId: string;
};

export type GetSubscriberResponse = get_subscriber_response;

export type GetUsersData = {
  /**
   * Filter the results by email address. The query string should be comma separated and url encoded.
   */
  email?: string | null;
  /**
   * Specify additional data to retrieve. Use "organizations" and/or "identities".
   */
  expand?: string | null;
  /**
   * Filter the results by if the user has at least one organization assigned.
   */
  hasOrganization?: boolean | null;
  /**
   * A string to get the next page of results if there are more results.
   */
  nextToken?: string | null;
  /**
   * Number of results per page. Defaults to 10 if parameter not sent.
   */
  pageSize?: number | null;
  /**
   * Filter the results by User ID. The query string should be comma separated and url encoded.
   */
  userId?: string | null;
  /**
   * Filter the results by username. The query string should be comma separated and url encoded.
   */
  username?: string | null;
};

export type GetUsersResponse = users_response;

export type RefreshUserClaimsData = {
  /**
   * The id of the user whose claims needs to be updated.
   */
  userId: string;
};

export type RefreshUserClaimsResponse = success_response;

export type GetUserDataData = {
  /**
   * Specify additional data to retrieve. Use "organizations" and/or "identities".
   */
  expand?: string | null;
  /**
   * The user's id.
   */
  id: string;
};

export type GetUserDataResponse = user;

export type CreateUserData = {
  /**
   * The details of the user to create.
   */
  requestBody?: {
    /**
     * Basic information required to create a user.
     */
    profile?: {
      /**
       * User's first name.
       */
      given_name?: string;
      /**
       * User's last name.
       */
      family_name?: string;
      /**
       * The user's profile picture.
       */
      picture?: string;
    };
    /**
     * The unique code associated with the organization you want the user to join.
     */
    organization_code?: string;
    /**
     * An external id to reference the user.
     */
    provided_id?: string;
    /**
     * Array of identities to assign to the created user
     */
    identities?: Array<{
      /**
       * The type of identity to create, e.g. email, username, or phone.
       */
      type?: "email" | "phone" | "username";
      /**
       * Additional details required to create the user.
       */
      details?: {
        /**
         * The email address of the user.
         */
        email?: string;
        /**
         * The phone number of the user.
         */
        phone?: string;
        /**
         * The country code for the phone number.
         */
        phone_country_id?: string;
        /**
         * The username of the user.
         */
        username?: string;
      };
    }>;
  };
};

export type CreateUserResponse = create_user_response;

export type UpdateUserData = {
  /**
   * The user's id.
   */
  id: string;
  /**
   * The user to update.
   */
  requestBody: {
    /**
     * User's first name.
     */
    given_name?: string;
    /**
     * User's last name.
     */
    family_name?: string;
    /**
     * The user's profile picture.
     */
    picture?: string;
    /**
     * Whether the user is currently suspended or not.
     */
    is_suspended?: boolean;
    /**
     * Prompt the user to change their password on next sign in.
     */
    is_password_reset_requested?: boolean;
    /**
     * An external id to reference the user.
     */
    provided_id?: string;
  };
};

export type UpdateUserResponse = update_user_response;

export type DeleteUserData = {
  /**
   * The user's id.
   */
  id: string;
  /**
   * Delete all data and remove the user's profile from all of Kinde, including the subscriber list
   */
  isDeleteProfile?: boolean;
};

export type DeleteUserResponse = success_response;

export type UpdateUserFeatureFlagOverrideData = {
  /**
   * The identifier for the feature flag
   */
  featureFlagKey: string;
  /**
   * The identifier for the user
   */
  userId: string;
  /**
   * Override value
   */
  value: string;
};

export type UpdateUserFeatureFlagOverrideResponse = success_response;

export type UpdateUserPropertyData = {
  /**
   * The identifier for the property
   */
  propertyKey: string;
  /**
   * The identifier for the user
   */
  userId: string;
  /**
   * The new property value
   */
  value: string;
};

export type UpdateUserPropertyResponse = success_response;

export type GetUserPropertyValuesData = {
  /**
   * The user's ID.
   */
  userId: string;
};

export type GetUserPropertyValuesResponse = get_property_values_response;

export type UpdateUserPropertiesData = {
  /**
   * Properties to update.
   */
  requestBody: {
    /**
     * Property keys and values
     */
    properties: {
      [key: string]: unknown;
    };
  };
  /**
   * The identifier for the user
   */
  userId: string;
};

export type UpdateUserPropertiesResponse = success_response;

export type SetUserPasswordData = {
  /**
   * Password details.
   */
  requestBody: {
    /**
     * The hashed password.
     */
    hashed_password: string;
    /**
     * The hashing method or algorithm used to encrypt the user’s password. Default is bcrypt.
     */
    hashing_method?: "bcrypt" | "crypt" | "md5" | "wordpress";
    /**
     * Extra characters added to passwords to make them stronger. Not required for bcrypt.
     */
    salt?: string;
    /**
     * Position of salt in password string. Not required for bcrypt.
     */
    salt_position?: "prefix" | "suffix";
    /**
     * The user will be prompted to set a new password after entering this one.
     */
    is_temporary_password?: boolean;
  };
  /**
   * The identifier for the user
   */
  userId: string;
};

export type SetUserPasswordResponse = success_response;

export type GetUserIdentitiesData = {
  /**
   * The ID of the identity to end before.
   */
  endingBefore?: string | null;
  /**
   * The ID of the identity to start after.
   */
  startingAfter?: string | null;
  /**
   * The user's ID.
   */
  userId: string;
};

export type GetUserIdentitiesResponse = get_identities_response;

export type CreateUserIdentityData = {
  /**
   * The identity details.
   */
  requestBody?: {
    /**
     * The email address, social identity, or username of the user.
     */
    value?: string;
    /**
     * The identity type
     */
    type?: "email" | "username" | "phone" | "enterprise" | "social";
    /**
     * The country code for the phone number, only required when identity type is 'phone'.
     */
    phone_country_id?: string;
    /**
     * The social connection ID, only required when identity type is 'social'.
     */
    connection_id?: string;
  };
  /**
   * The user's ID.
   */
  userId: string;
};

export type CreateUserIdentityResponse = create_identity_response;

export type DeleteUserSessionsData = {
  /**
   * The identifier for the user
   */
  userId: string;
};

export type DeleteUserSessionsResponse = success_response;

export type GetUsersMfaData = {
  /**
   * The identifier for the user
   */
  userId: string;
};

export type GetUsersMfaResponse = get_user_mfa_response;

export type ResetUsersMfaData = {
  /**
   * The identifier for the MFA factor
   */
  factorId: string;
  /**
   * The identifier for the user
   */
  userId: string;
};

export type ResetUsersMfaResponse = success_response;

export type GetEventData = {
  /**
   * The event id.
   */
  eventId: string;
};

export type GetEventResponse = get_event_response;

export type GetEventTypesResponse = get_event_types_response;

export type DeleteWebHookData = {
  /**
   * The webhook id.
   */
  webhookId: string;
};

export type DeleteWebHookResponse = delete_webhook_response;

export type GetWebHooksResponse = get_webhooks_response;

export type CreateWebHookData = {
  /**
   * Webhook request specification.
   */
  requestBody: {
    /**
     * The webhook endpoint url
     */
    endpoint: string;
    /**
     * Array of event type keys
     */
    event_types: Array<string>;
    /**
     * The webhook name
     */
    name: string;
    /**
     * The webhook description
     */
    description?: string | null;
  };
};

export type CreateWebHookResponse = create_webhook_response;

export type UpdateWebHookData = {
  /**
   * Update webhook request specification.
   */
  requestBody: {
    /**
     * Array of event type keys
     */
    event_types?: Array<string>;
    /**
     * The webhook name
     */
    name?: string;
    /**
     * The webhook description
     */
    description?: string | null;
  };
};

export type UpdateWebHookResponse = update_webhook_response;

export type GetUserProfileV2Response = user_profile_v2;

export type TokenIntrospectionData = {
  /**
   * Token details.
   */
  formData: {
    /**
     * The token to be introspected.
     */
    token: string;
    /**
     * A hint about the token type being queried in the request.
     */
    token_type_hint?: "access_token" | "refresh_token";
  };
};

export type TokenIntrospectionResponse = token_introspect;

export type TokenRevocationData = {
  /**
   * Details of the token to be revoked.
   */
  formData: {
    /**
     * The `client_id` of your application.
     */
    client_id: string;
    /**
     * The `client_secret` of your application. Required for backend apps only.
     */
    client_secret?: string;
    /**
     * The token to be revoked.
     */
    token: string;
    /**
     * The type of token to be revoked.
     */
    token_type_hint?: "access_token" | "refresh_token";
  };
};

export type TokenRevocationResponse = unknown;
