// This file is auto-generated by @hey-api/openapi-ts

export const $success_response = {
  type: "object",
  properties: {
    message: {
      type: "string",
      example: "Success",
    },
    code: {
      type: "string",
      example: "OK",
    },
  },
} as const;

export const $error = {
  type: "object",
  properties: {
    code: {
      type: "string",
      description: "Error code.",
    },
    message: {
      type: "string",
      description: "Error message.",
    },
  },
} as const;

export const $error_response = {
  type: "object",
  properties: {
    errors: {
      type: "array",
      items: {
        $ref: "#/components/schemas/error",
      },
    },
  },
} as const;

export const $not_found_response = {
  type: "object",
  properties: {
    errors: {
      type: "object",
      properties: {
        code: {
          type: "string",
          example: "ROUTE_NOT_FOUND",
        },
        message: {
          type: "string",
          example: "The requested API route does not exist",
        },
      },
    },
  },
} as const;

export const $get_apis_response = {
  type: "object",
  properties: {
    code: {
      type: "string",
      description: "Response code.",
      example: "OK",
    },
    message: {
      type: "string",
      description: "Response message.",
      example: "Success",
    },
    next_token: {
      type: "string",
      description: "Pagination token.",
      example: "Njo5Om1hvWVfYXNj",
    },
    apis: {
      type: "array",
      items: {
        type: "object",
        properties: {
          id: {
            description: "The unique ID for the API.",
            type: "string",
            example: "7ccd126599aa422a771abcb341596881",
          },
          name: {
            type: "string",
            description: "The API’s name.",
            example: "Example API",
          },
          audience: {
            type: "string",
            description:
              "A unique identifier for the API - commonly the URL. This value will be used as the `audience` parameter in authorization claims.",
            example: "https://api.example.com",
          },
          is_management_api: {
            type: "boolean",
            description: "Whether or not it is the Kinde management API.",
            example: false,
          },
        },
      },
    },
  },
} as const;

export const $create_apis_response = {
  type: "object",
  properties: {
    message: {
      type: "string",
      description: "A Kinde generated message.",
      example: "Success",
    },
    code: {
      type: "string",
      description: "A Kinde generated status code.",
      example: "OK",
    },
    api: {
      type: "object",
      properties: {
        id: {
          description: "The unique ID for the API.",
          type: "string",
          example: "7ccd126599aa422a771abcb341596881",
        },
      },
    },
  },
} as const;

export const $get_environment_variables_response = {
  type: "object",
  properties: {
    code: {
      type: "string",
      description: "Response code.",
      example: "OK",
    },
    message: {
      type: "string",
      description: "Response message.",
      example: "Success",
    },
    has_more: {
      description: "Whether more records exist.",
      type: "boolean",
    },
    environment_variables: {
      type: "array",
      items: {
        $ref: "#/components/schemas/environment_variable",
      },
    },
  },
} as const;

export const $get_environment_variable_response = {
  type: "object",
  properties: {
    code: {
      type: "string",
      description: "Response code.",
      example: "OK",
    },
    message: {
      type: "string",
      description: "Response message.",
      example: "Success",
    },
    environment_variable: {
      $ref: "#/components/schemas/environment_variable",
    },
  },
} as const;

export const $create_environment_variable_response = {
  type: "object",
  properties: {
    message: {
      type: "string",
      description: "A Kinde generated message.",
      example: "Environment variable created",
    },
    code: {
      type: "string",
      description: "A Kinde generated status code.",
      example: "VARIABLE_CREATED",
    },
    environment_variable: {
      type: "object",
      properties: {
        id: {
          description: "The unique ID for the environment variable.",
          type: "string",
          example: "env_var_0192b194f6156fb7452fe38cfb144958",
        },
      },
    },
  },
} as const;

export const $update_environment_variable_response = {
  type: "object",
  properties: {
    message: {
      type: "string",
      description: "A Kinde generated message.",
      example: "Environment variable updated",
    },
    code: {
      type: "string",
      description: "A Kinde generated status code.",
      example: "ENVIRONMENT_VARIABLE_UPDATED",
    },
  },
} as const;

export const $delete_environment_variable_response = {
  type: "object",
  properties: {
    message: {
      type: "string",
      description: "A Kinde generated message.",
      example: "Environment variable deleted",
    },
    code: {
      type: "string",
      description: "A Kinde generated status code.",
      example: "ENVIRONMENT_VARIABLE_DELETED",
    },
  },
} as const;

export const $get_business_response = {
  type: "object",
  properties: {
    code: {
      type: "string",
      description: "Response code.",
      example: "OK",
    },
    message: {
      type: "string",
      description: "Response message.",
      example: "Success",
    },
    business: {
      type: "object",
      properties: {
        code: {
          type: "string",
          description: "The unique ID for the business.",
          example: "bus_c69fb73b091",
        },
        name: {
          type: "string",
          description: "Your business's name.",
          example: "Tailsforce Ltd",
        },
        phone: {
          type: "string",
          description: "Phone number associated with business.",
          example: "555-555-5555",
          nullable: true,
        },
        email: {
          type: "string",
          description: "Email address associated with business.",
          example: "sally@example.com",
          nullable: true,
        },
        industry: {
          type: "string",
          description: "The industry your business is in.",
          example: "Healthcare & Medical",
          nullable: true,
        },
        timezone: {
          type: "string",
          description: "The timezone your business is in.",
          example: "Los Angeles (Pacific Standard Time)",
          nullable: true,
        },
        privacy_url: {
          type: "string",
          description: "Your Privacy policy URL.",
          example: "https://example.com/privacy",
          nullable: true,
        },
        terms_url: {
          type: "string",
          description: "Your Terms and Conditions URL.",
          example: "https://example.com/terms",
          nullable: true,
        },
        has_clickwrap: {
          type: "boolean",
          description: "Whether your business uses clickwrap agreements.",
          example: false,
        },
        has_kinde_branding: {
          type: "boolean",
          description: "Whether your business shows Kinde branding.",
          example: true,
        },
        created_on: {
          type: "string",
          description: "Date of business creation in ISO 8601 format.",
          example: "2021-01-01T00:00:00Z",
        },
      },
    },
  },
} as const;

export const $get_industries_response = {
  type: "object",
  properties: {
    code: {
      type: "string",
      description: "Response code.",
      example: "OK",
    },
    message: {
      type: "string",
      description: "Response message.",
      example: "Success",
    },
    industries: {
      type: "array",
      items: {
        type: "object",
        properties: {
          key: {
            description: "The unique key for the industry.",
            type: "string",
            example: "administration_office_support",
          },
          name: {
            type: "string",
            description: "The display name for the industry.",
            example: "Administration & Office Support",
          },
        },
      },
    },
  },
} as const;

export const $get_timezones_response = {
  type: "object",
  properties: {
    code: {
      type: "string",
      description: "Response code.",
      example: "OK",
    },
    message: {
      type: "string",
      description: "Response message.",
      example: "Success",
    },
    timezones: {
      type: "array",
      items: {
        type: "object",
        properties: {
          key: {
            description: "The unique key for the timezone.",
            type: "string",
            example: "london_greenwich_mean_time",
          },
          name: {
            type: "string",
            description: "The display name for the timezone.",
            example: "London (Greenwich Mean Time) [+01:00]",
          },
        },
      },
    },
  },
} as const;

export const $get_api_response = {
  type: "object",
  properties: {
    code: {
      type: "string",
      description: "Response code.",
      example: "OK",
    },
    message: {
      type: "string",
      description: "Response message.",
      example: "success_response",
    },
    api: {
      type: "object",
      properties: {
        id: {
          type: "string",
          description: "Unique ID of the API.",
          example: "7ccd126599aa422a771abcb341596881",
        },
        name: {
          type: "string",
          description: "The API’s name.",
          example: "Example API",
        },
        audience: {
          type: "string",
          description:
            "A unique identifier for the API - commonly the URL. This value will be used as the `audience` parameter in authorization claims.",
          example: "https://api.example.com",
        },
        is_management_api: {
          type: "boolean",
          description: "Whether or not it is the Kinde management API.",
          example: false,
        },
        applications: {
          type: "array",
          items: {
            type: "object",
            properties: {
              id: {
                type: "string",
                description: "The Client ID of the application.",
                example: "3b0b5c6c8fcc464fab397f4969b5f482",
              },
              name: {
                type: "string",
                description: "The application's name.",
                example: "My M2M app",
              },
              type: {
                type: "string",
                description: "The application's type.",
                enum: [
                  "Machine to machine (M2M)",
                  "Back-end web",
                  "Front-end and mobile",
                ],
                example: "Machine to machine (M2M)",
              },
              is_active: {
                type: "boolean",
                description:
                  "Whether or not the application is authorized to access the API",
                example: true,
                nullable: true,
              },
            },
          },
        },
      },
    },
  },
} as const;

export const $authorize_app_api_response = {
  type: "object",
  properties: {
    message: {
      type: "string",
      example: "API applications updated",
    },
    code: {
      type: "string",
      example: "API_APPLICATIONS_UPDATED",
    },
    applications_disconnected: {
      type: "array",
      items: {
        type: "string",
      },
    },
    applications_connected: {
      type: "array",
      items: {
        type: "string",
        example: "d2db282d6214242b3b145c123f0c123",
      },
    },
  },
} as const;

export const $delete_api_response = {
  type: "object",
  properties: {
    message: {
      type: "string",
      example: "API successfully deleted",
    },
    code: {
      type: "string",
      example: "API_DELETED",
    },
  },
} as const;

export const $user = {
  type: "object",
  properties: {
    id: {
      type: "string",
      description: "Unique ID of the user in Kinde.",
    },
    provided_id: {
      type: "string",
      description: "External ID for user.",
    },
    preferred_email: {
      type: "string",
      description: "Default email address of the user in Kinde.",
    },
    username: {
      type: "string",
      description: "Primary username of the user in Kinde.",
    },
    last_name: {
      type: "string",
      description: "User's last name.",
    },
    first_name: {
      type: "string",
      description: "User's first name.",
    },
    is_suspended: {
      type: "boolean",
      description: "Whether the user is currently suspended or not.",
    },
    picture: {
      type: "string",
      description: "User's profile picture URL.",
    },
    total_sign_ins: {
      type: "integer",
      description: "Total number of user sign ins.",
      nullable: true,
    },
    failed_sign_ins: {
      type: "integer",
      description: "Number of consecutive failed user sign ins.",
      nullable: true,
    },
    last_signed_in: {
      type: "string",
      description: "Last sign in date in ISO 8601 format.",
      nullable: true,
    },
    created_on: {
      type: "string",
      description: "Date of user creation in ISO 8601 format.",
      nullable: true,
    },
    organizations: {
      type: "array",
      description: "Array of organizations a user belongs to.",
      items: {
        type: "string",
      },
    },
    identities: {
      type: "array",
      description: "Array of identities belonging to the user.",
      items: {
        type: "object",
        properties: {
          type: {
            type: "string",
          },
          identity: {
            type: "string",
          },
        },
      },
    },
  },
} as const;

export const $update_user_response = {
  type: "object",
  properties: {
    id: {
      type: "string",
      description: "Unique ID of the user in Kinde.",
    },
    given_name: {
      type: "string",
      description: "User's first name.",
    },
    family_name: {
      type: "string",
      description: "User's last name.",
    },
    email: {
      type: "string",
      description: "User's preferred email.",
    },
    is_suspended: {
      type: "boolean",
      description: "Whether the user is currently suspended or not.",
    },
    is_password_reset_requested: {
      type: "boolean",
      description: "Whether a password reset has been requested.",
    },
    picture: {
      type: "string",
      description: "User's profile picture URL.",
      nullable: true,
    },
  },
} as const;

export const $users = {
  type: "array",
  description: "Array of users.",
  items: {
    $ref: "#/components/schemas/user",
  },
} as const;

export const $users_response = {
  type: "object",
  properties: {
    code: {
      type: "string",
      description: "Response code.",
    },
    message: {
      type: "string",
      description: "Response message.",
    },
    users: {
      type: "array",
      items: {
        type: "object",
        properties: {
          id: {
            type: "string",
            description: "Unique ID of the user in Kinde.",
          },
          provided_id: {
            type: "string",
            description: "External ID for user.",
          },
          email: {
            type: "string",
            description: "Default email address of the user in Kinde.",
          },
          username: {
            type: "string",
            description: "Primary username of the user in Kinde.",
          },
          last_name: {
            type: "string",
            description: "User's last name.",
          },
          first_name: {
            type: "string",
            description: "User's first name.",
          },
          is_suspended: {
            type: "boolean",
            description: "Whether the user is currently suspended or not.",
          },
          picture: {
            type: "string",
            description: "User's profile picture URL.",
          },
          total_sign_ins: {
            type: "integer",
            description: "Total number of user sign ins.",
            nullable: true,
          },
          failed_sign_ins: {
            type: "integer",
            description: "Number of consecutive failed user sign ins.",
            nullable: true,
          },
          last_signed_in: {
            type: "string",
            description: "Last sign in date in ISO 8601 format.",
            nullable: true,
          },
          created_on: {
            type: "string",
            description: "Date of user creation in ISO 8601 format.",
            nullable: true,
          },
          organizations: {
            type: "array",
            description: "Array of organizations a user belongs to.",
            items: {
              type: "string",
            },
          },
          identities: {
            type: "array",
            description: "Array of identities belonging to the user.",
            items: {
              type: "object",
              properties: {
                type: {
                  type: "string",
                },
                identity: {
                  type: "string",
                },
              },
            },
          },
        },
      },
    },
    next_token: {
      type: "string",
      description: "Pagination token.",
    },
  },
} as const;

export const $create_user_response = {
  type: "object",
  properties: {
    id: {
      description: "Unique ID of the user in Kinde.",
      type: "string",
    },
    created: {
      description: "True if the user was successfully created.",
      type: "boolean",
    },
    identities: {
      type: "array",
      items: {
        $ref: "#/components/schemas/user_identity",
      },
    },
  },
} as const;

export const $create_organization_response = {
  type: "object",
  properties: {
    message: {
      type: "string",
      description: "Response message.",
      example: "Success",
    },
    code: {
      type: "string",
      description: "Response code.",
      example: "OK",
    },
    organization: {
      type: "object",
      properties: {
        code: {
          description: "The organization's unique code.",
          type: "string",
          example: "org_1ccfb819462",
        },
      },
    },
  },
} as const;

export const $user_identity = {
  type: "object",
  properties: {
    type: {
      type: "string",
      description: "The type of identity object created.",
    },
    result: {
      type: "object",
      description: "The result of the user creation operation.",
      properties: {
        created: {
          type: "boolean",
          description: "True if the user identity was successfully created.",
        },
      },
    },
  },
} as const;

export const $create_property_response = {
  type: "object",
  properties: {
    message: {
      type: "string",
    },
    code: {
      type: "string",
    },
    property: {
      type: "object",
      properties: {
        id: {
          description: "The property's ID.",
          type: "string",
        },
      },
    },
  },
} as const;

export const $create_identity_response = {
  type: "object",
  properties: {
    message: {
      type: "string",
    },
    code: {
      type: "string",
    },
    identity: {
      type: "object",
      properties: {
        id: {
          description: "The identity's ID.",
          type: "string",
        },
      },
    },
  },
} as const;

export const $get_identities_response = {
  type: "object",
  properties: {
    code: {
      type: "string",
      description: "Response code.",
    },
    message: {
      type: "string",
      description: "Response message.",
    },
    identities: {
      type: "array",
      items: {
        $ref: "#/components/schemas/identity",
      },
    },
    has_more: {
      description: "Whether more records exist.",
      type: "boolean",
    },
  },
} as const;

export const $get_properties_response = {
  type: "object",
  properties: {
    code: {
      type: "string",
      description: "Response code.",
    },
    message: {
      type: "string",
      description: "Response message.",
    },
    properties: {
      type: "array",
      items: {
        $ref: "#/components/schemas/property",
      },
    },
    has_more: {
      description: "Whether more records exist.",
      type: "boolean",
    },
  },
} as const;

export const $get_property_values_response = {
  type: "object",
  properties: {
    code: {
      type: "string",
      description: "Response code.",
    },
    message: {
      type: "string",
      description: "Response message.",
    },
    properties: {
      type: "array",
      items: {
        $ref: "#/components/schemas/property_value",
      },
    },
    next_token: {
      description: "Pagination token.",
      type: "string",
    },
  },
} as const;

export const $create_category_response = {
  type: "object",
  properties: {
    message: {
      type: "string",
    },
    code: {
      type: "string",
    },
    category: {
      type: "object",
      properties: {
        id: {
          description: "The category's ID.",
          type: "string",
        },
      },
    },
  },
} as const;

export const $get_categories_response = {
  type: "object",
  properties: {
    code: {
      type: "string",
      description: "Response code.",
    },
    message: {
      type: "string",
      description: "Response message.",
    },
    categories: {
      type: "array",
      items: {
        $ref: "#/components/schemas/category",
      },
    },
    has_more: {
      description: "Whether more records exist.",
      type: "boolean",
    },
  },
} as const;

export const $get_event_response = {
  type: "object",
  properties: {
    code: {
      type: "string",
      description: "Response code.",
    },
    message: {
      type: "string",
      description: "Response message.",
    },
    event: {
      type: "object",
      properties: {
        type: {
          type: "string",
        },
        source: {
          type: "string",
        },
        event_id: {
          type: "string",
        },
        timestamp: {
          type: "integer",
          description: "Timestamp in ISO 8601 format.",
        },
        data: {
          type: "object",
          description: "Event specific data object.",
        },
      },
    },
  },
} as const;

export const $get_event_types_response = {
  type: "object",
  properties: {
    code: {
      type: "string",
      description: "Response code.",
    },
    message: {
      type: "string",
      description: "Response message.",
    },
    event_types: {
      type: "array",
      items: {
        $ref: "#/components/schemas/event_type",
      },
    },
  },
} as const;

export const $get_webhooks_response = {
  type: "object",
  properties: {
    code: {
      type: "string",
      description: "Response code.",
    },
    message: {
      type: "string",
      description: "Response message.",
    },
    webhooks: {
      type: "array",
      items: {
        $ref: "#/components/schemas/webhook",
      },
    },
  },
} as const;

export const $webhook = {
  type: "object",
  properties: {
    id: {
      type: "string",
    },
    name: {
      type: "string",
    },
    endpoint: {
      type: "string",
    },
    description: {
      type: "string",
    },
    event_types: {
      type: "array",
      items: {
        type: "string",
      },
    },
    created_on: {
      type: "string",
      description: "Created on date in ISO 8601 format.",
    },
  },
} as const;

export const $create_webhook_response = {
  type: "object",
  properties: {
    code: {
      type: "string",
      description: "Response code.",
    },
    message: {
      type: "string",
      description: "Response message.",
    },
    webhook: {
      type: "object",
      properties: {
        id: {
          type: "string",
        },
        endpoint: {
          type: "string",
        },
      },
    },
  },
} as const;

export const $update_webhook_response = {
  type: "object",
  properties: {
    message: {
      type: "string",
    },
    code: {
      type: "string",
    },
    webhook: {
      type: "object",
      properties: {
        id: {
          type: "string",
        },
      },
    },
  },
} as const;

export const $create_connection_response = {
  type: "object",
  properties: {
    message: {
      type: "string",
    },
    code: {
      type: "string",
    },
    connection: {
      type: "object",
      properties: {
        id: {
          description: "The connection's ID.",
          type: "string",
        },
      },
    },
  },
} as const;

export const $get_connections_response = {
  type: "object",
  properties: {
    code: {
      type: "string",
      description: "Response code.",
    },
    message: {
      type: "string",
      description: "Response message.",
    },
    connections: {
      type: "array",
      items: {
        $ref: "#/components/schemas/connection",
      },
    },
    has_more: {
      description: "Whether more records exist.",
      type: "boolean",
    },
  },
} as const;

export const $delete_webhook_response = {
  type: "object",
  properties: {
    code: {
      type: "string",
      description: "Response code.",
    },
    message: {
      type: "string",
      description: "Response message.",
    },
  },
} as const;

export const $event_type = {
  type: "object",
  properties: {
    id: {
      type: "string",
    },
    code: {
      type: "string",
    },
    name: {
      type: "string",
    },
    origin: {
      type: "string",
    },
    schema: {
      type: "object",
    },
  },
} as const;

export const $organization_item_schema = {
  type: "object",
  properties: {
    code: {
      type: "string",
      description: "The unique identifier for the organization.",
      example: "org_1ccfb819462",
    },
    name: {
      type: "string",
      description: "The organization's name.",
      example: "Acme Corp",
    },
    handle: {
      type: "string",
      description:
        "A unique handle for the organization - can be used for dynamic callback urls.",
      example: "acme_corp",
      nullable: true,
    },
    is_default: {
      type: "boolean",
      description: "Whether the organization is the default organization.",
      example: false,
    },
    external_id: {
      type: "string",
      description:
        "The organization's external identifier - commonly used when migrating from or mapping to other systems.",
      example: "some1234",
      nullable: true,
    },
    is_auto_membership_enabled: {
      type: "boolean",
      example: true,
      description:
        "If users become members of this organization when the org code is supplied during authentication.",
    },
  },
} as const;

export const $get_environment_response = {
  type: "object",
  properties: {
    code: {
      type: "string",
      description: "Response code.",
      example: "OK",
    },
    message: {
      type: "string",
      description: "Response message.",
      example: "success_response",
    },
    environment: {
      type: "object",
      properties: {
        code: {
          type: "string",
          description: "The unique identifier for the environment.",
          example: "production",
        },
        name: {
          type: "string",
          description: "The environment's name.",
          example: "Production",
        },
        hotjar_site_id: {
          type: "string",
          description: "Your HotJar site ID.",
          example: 404009,
          nullable: true,
        },
        google_analytics_tag: {
          type: "string",
          description: "Your Google Analytics tag.",
          example: "G-1234567",
          nullable: true,
        },
        is_default: {
          type: "boolean",
          description:
            "Whether the environment is the default. Typically this is your production environment.",
          example: true,
        },
        is_live: {
          type: "boolean",
          description: "Whether the environment is live.",
          example: true,
        },
        kinde_domain: {
          type: "string",
          description: "Your domain on Kinde",
          example: "example.kinde.com",
        },
        custom_domain: {
          type: "string",
          description: "Your custom domain for the environment",
          nullable: true,
          example: "app.example.com",
        },
        logo: {
          type: "string",
          nullable: true,
          description: "The organization's logo URL.",
          example:
            "https://yoursubdomain.kinde.com/logo?org_code=org_1ccfb819462&cache=311308b8ad3544bf8e572979f0e5748d",
        },
        logo_dark: {
          type: "string",
          nullable: true,
          description:
            "The organization's logo URL to be used for dark themes.",
          example:
            "https://yoursubdomain.kinde.com/logo_dark?org_code=org_1ccfb819462&cache=311308b8ad3544bf8e572979f0e5748d",
        },
        favicon_svg: {
          type: "string",
          nullable: true,
          description:
            "The organization's SVG favicon URL. Optimal format for most browsers",
          example:
            "https://yoursubdomain.kinde.com/favicon_svg?org_code=org_1ccfb819462&cache=311308b8ad3544bf8e572979f0e5748d",
        },
        favicon_fallback: {
          type: "string",
          nullable: true,
          description:
            "The favicon URL to be used as a fallback in browsers that don’t support SVG, add a PNG",
          example:
            "https://yoursubdomain.kinde.com/favicon_fallback?org_code=org_1ccfb819462&cache=311308b8ad3544bf8e572979f0e5748d",
        },
        link_color: {
          type: "object",
          nullable: true,
          properties: {
            raw: {
              type: "string",
              example: "#0056F1",
            },
            hex: {
              type: "string",
              example: "#0056F1",
            },
            hsl: {
              type: "string",
              example: "hsl(220, 100%, 50%)",
            },
          },
        },
        background_color: {
          nullable: true,
          type: "object",
          properties: {
            raw: {
              type: "string",
              example: "#ffffff",
            },
            hex: {
              type: "string",
              example: "#ffffff",
            },
            hsl: {
              type: "string",
              example: "hsl(0, 0%, 100%)",
            },
          },
        },
        button_color: {
          nullable: true,
          type: "object",
          properties: {
            raw: {
              type: "string",
              example: "#0056F1",
            },
            hex: {
              type: "string",
              example: "#0056F1",
            },
            hsl: {
              type: "string",
              example: "hsl(220, 100%, 50%)",
            },
          },
        },
        button_text_color: {
          nullable: true,
          type: "object",
          properties: {
            raw: {
              type: "string",
              example: "#ffffff",
            },
            hex: {
              type: "string",
              example: "#ffffff",
            },
            hsl: {
              type: "string",
              example: "hsl(0, 0%, 100%)",
            },
          },
        },
        link_color_dark: {
          type: "object",
          nullable: true,
          properties: {
            raw: {
              type: "string",
              example: "#0056F1",
            },
            hex: {
              type: "string",
              example: "#0056F1",
            },
            hsl: {
              type: "string",
              example: "hsl(220, 100%, 50%)",
            },
          },
        },
        background_color_dark: {
          type: "object",
          nullable: true,
          properties: {
            raw: {
              type: "string",
              example: "#0056F1",
            },
            hex: {
              type: "string",
              example: "#0056F1",
            },
            hsl: {
              type: "string",
              example: "hsl(220, 100%, 50%)",
            },
          },
        },
        button_text_color_dark: {
          type: "object",
          nullable: true,
          properties: {
            raw: {
              type: "string",
              example: "#0056F1",
            },
            hex: {
              type: "string",
              example: "#0056F1",
            },
            hsl: {
              type: "string",
              example: "hsl(220, 100%, 50%)",
            },
          },
        },
        button_color_dark: {
          type: "object",
          nullable: true,
          properties: {
            raw: {
              type: "string",
              example: "#0056F1",
            },
            hex: {
              type: "string",
              example: "#0056F1",
            },
            hsl: {
              type: "string",
              example: "hsl(220, 100%, 50%)",
            },
          },
        },
        button_border_radius: {
          type: "integer",
          nullable: true,
          description:
            "The border radius for buttons. Value is px, Kinde transforms to rem for rendering",
          example: 8,
        },
        card_border_radius: {
          type: "integer",
          nullable: true,
          description:
            "The border radius for cards. Value is px, Kinde transforms to rem for rendering",
          example: 16,
        },
        input_border_radius: {
          type: "integer",
          nullable: true,
          description:
            "The border radius for inputs. Value is px, Kinde transforms to rem for rendering",
          example: 4,
        },
        theme_code: {
          type: "string",
          description:
            "Whether the environment is forced into light mode, dark mode or user preference",
          enum: ["light", "dark", "user_preference"],
        },
        color_scheme: {
          type: "string",
          description:
            "The color scheme for the environment used for meta tags based on the theme code",
          enum: ["light", "dark", "light dark"],
        },
        created_on: {
          type: "string",
          description: "Date of environment creation in ISO 8601 format.",
          example: "2021-01-01T00:00:00Z",
        },
      },
    },
  },
} as const;

export const $get_organization_response = {
  type: "object",
  properties: {
    code: {
      type: "string",
      description: "The unique identifier for the organization.",
      example: "org_1ccfb819462",
    },
    name: {
      type: "string",
      description: "The organization's name.",
      example: "Acme Corp",
    },
    handle: {
      type: "string",
      description:
        "A unique handle for the organization - can be used for dynamic callback urls.",
      example: "acme_corp",
      nullable: true,
    },
    is_default: {
      type: "boolean",
      description: "Whether the organization is the default organization.",
      example: false,
    },
    external_id: {
      type: "string",
      description:
        "The organization's external identifier - commonly used when migrating from or mapping to other systems.",
      example: "some1234",
      nullable: true,
    },
    is_auto_membership_enabled: {
      type: "boolean",
      example: true,
      description:
        "If users become members of this organization when the org code is supplied during authentication.",
    },
    logo: {
      type: "string",
      nullable: true,
      description: "The organization's logo URL.",
      example:
        "https://yoursubdomain.kinde.com/logo?org_code=org_1ccfb819462&cache=311308b8ad3544bf8e572979f0e5748d",
    },
    logo_dark: {
      type: "string",
      nullable: true,
      description: "The organization's logo URL to be used for dark themes.",
      example:
        "https://yoursubdomain.kinde.com/logo_dark?org_code=org_1ccfb819462&cache=311308b8ad3544bf8e572979f0e5748d",
    },
    favicon_svg: {
      type: "string",
      nullable: true,
      description:
        "The organization's SVG favicon URL. Optimal format for most browsers",
      example:
        "https://yoursubdomain.kinde.com/favicon_svg?org_code=org_1ccfb819462&cache=311308b8ad3544bf8e572979f0e5748d",
    },
    favicon_fallback: {
      type: "string",
      nullable: true,
      description:
        "The favicon URL to be used as a fallback in browsers that don’t support SVG, add a PNG",
      example:
        "https://yoursubdomain.kinde.com/favicon_fallback?org_code=org_1ccfb819462&cache=311308b8ad3544bf8e572979f0e5748d",
    },
    link_color: {
      type: "object",
      nullable: true,
      properties: {
        raw: {
          type: "string",
          example: "#0056F1",
        },
        hex: {
          type: "string",
          example: "#0056F1",
        },
        hsl: {
          type: "string",
          example: "hsl(220, 100%, 50%)",
        },
      },
    },
    background_color: {
      nullable: true,
      type: "object",
      properties: {
        raw: {
          type: "string",
          example: "#ffffff",
        },
        hex: {
          type: "string",
          example: "#ffffff",
        },
        hsl: {
          type: "string",
          example: "hsl(0, 0%, 100%)",
        },
      },
    },
    button_color: {
      nullable: true,
      type: "object",
      properties: {
        raw: {
          type: "string",
          example: "#0056F1",
        },
        hex: {
          type: "string",
          example: "#0056F1",
        },
        hsl: {
          type: "string",
          example: "hsl(220, 100%, 50%)",
        },
      },
    },
    button_text_color: {
      nullable: true,
      type: "object",
      properties: {
        raw: {
          type: "string",
          example: "#ffffff",
        },
        hex: {
          type: "string",
          example: "#ffffff",
        },
        hsl: {
          type: "string",
          example: "hsl(0, 0%, 100%)",
        },
      },
    },
    link_color_dark: {
      type: "object",
      nullable: true,
      properties: {
        raw: {
          type: "string",
          example: "#0056F1",
        },
        hex: {
          type: "string",
          example: "#0056F1",
        },
        hsl: {
          type: "string",
          example: "hsl(220, 100%, 50%)",
        },
      },
    },
    background_color_dark: {
      type: "object",
      nullable: true,
      properties: {
        raw: {
          type: "string",
          example: "#0056F1",
        },
        hex: {
          type: "string",
          example: "#0056F1",
        },
        hsl: {
          type: "string",
          example: "hsl(220, 100%, 50%)",
        },
      },
    },
    button_text_color_dark: {
      type: "object",
      nullable: true,
      properties: {
        raw: {
          type: "string",
          example: "#0056F1",
        },
        hex: {
          type: "string",
          example: "#0056F1",
        },
        hsl: {
          type: "string",
          example: "hsl(220, 100%, 50%)",
        },
      },
    },
    button_color_dark: {
      type: "object",
      nullable: true,
      properties: {
        raw: {
          type: "string",
          example: "#0056F1",
        },
        hex: {
          type: "string",
          example: "#0056F1",
        },
        hsl: {
          type: "string",
          example: "hsl(220, 100%, 50%)",
        },
      },
    },
    button_border_radius: {
      type: "integer",
      nullable: true,
      description:
        "The border radius for buttons. Value is px, Kinde transforms to rem for rendering",
      example: 8,
    },
    card_border_radius: {
      type: "integer",
      nullable: true,
      description:
        "The border radius for cards. Value is px, Kinde transforms to rem for rendering",
      example: 16,
    },
    input_border_radius: {
      type: "integer",
      nullable: true,
      description:
        "The border radius for inputs. Value is px, Kinde transforms to rem for rendering",
      example: 4,
    },
    theme_code: {
      type: "string",
      description:
        "Whether the environment is forced into light mode, dark mode or user preference",
      enum: ["light", "dark", "user_preference"],
    },
    color_scheme: {
      type: "string",
      description:
        "The color scheme for the environment used for meta tags based on the theme code",
      enum: ["light", "dark", "light dark"],
    },
    created_on: {
      type: "string",
      description: "Date of organization creation in ISO 8601 format.",
      example: "2021-01-01T00:00:00Z",
    },
    is_allow_registrations: {
      nullable: true,
      type: "boolean",
      example: true,
      deprecated: true,
      description: "Deprecated - Use 'is_auto_membership_enabled' instead",
    },
  },
} as const;

export const $organization_user = {
  type: "object",
  properties: {
    id: {
      type: "string",
      example: "kp:97c2ba24217d48e3b96a799b76cf2c74",
      description: "The unique ID for the user.",
    },
    email: {
      type: "string",
      example: "john.snow@example.com",
      description: "The user's email address.",
    },
    full_name: {
      type: "string",
      example: "John Snow",
      description: "The user's full name.",
    },
    last_name: {
      type: "string",
      example: "Snow",
      description: "The user's last name.",
    },
    first_name: {
      type: "string",
      example: "John",
      description: "The user's first name.",
    },
    picture: {
      type: "string",
      example: "https://example.com/john_snow.jpg",
      description: "The user's profile picture URL.",
    },
    joined_on: {
      type: "string",
      example: "2021-01-01T00:00:00Z",
      description: "The date the user joined the organization.",
    },
    roles: {
      type: "array",
      description: "The roles the user has in the organization.",
      items: {
        type: "string",
        example: "admin",
        description: "The role's key.",
      },
    },
  },
} as const;

export const $category = {
  type: "object",
  properties: {
    id: {
      type: "string",
    },
    name: {
      type: "string",
    },
  },
} as const;

export const $connection = {
  type: "object",
  properties: {
    id: {
      type: "string",
    },
    name: {
      type: "string",
    },
    display_name: {
      type: "string",
    },
    strategy: {
      type: "string",
    },
  },
} as const;

export const $environment_variable = {
  type: "object",
  properties: {
    id: {
      description: "The unique ID for the environment variable.",
      type: "string",
      example: "env_var_0192b1941f125645fa15bf28a662a0b3",
    },
    key: {
      type: "string",
      description: "The name of the environment variable.",
      example: "MY_API_KEY",
    },
    value: {
      type: "string",
      description: "The value of the environment variable.",
      example: "some-secret",
      nullable: true,
    },
    is_secret: {
      type: "boolean",
      description: "Whether the environment variable is sensitive.",
      example: false,
    },
    created_on: {
      type: "string",
      description: "The date the environment variable was created.",
      example: "2021-01-01T00:00:00Z",
    },
  },
} as const;

export const $identity = {
  type: "object",
  properties: {
    id: {
      type: "string",
    },
    type: {
      type: "string",
    },
    is_confirmed: {
      type: "boolean",
    },
    created_on: {
      type: "string",
      description: "Date of user creation in ISO 8601 format.",
    },
    last_login_on: {
      type: "string",
      description: "Date of user creation in ISO 8601 format.",
    },
    total_logins: {
      type: "integer",
    },
    name: {
      type: "string",
    },
  },
} as const;

export const $property = {
  type: "object",
  properties: {
    id: {
      type: "string",
    },
    key: {
      type: "string",
    },
    name: {
      type: "string",
    },
    is_private: {
      type: "boolean",
    },
    description: {
      type: "string",
    },
    is_kinde_property: {
      type: "boolean",
    },
  },
} as const;

export const $property_value = {
  type: "object",
  properties: {
    id: {
      type: "string",
      example: "prop_0192b7e8b4f8ca08110d2b22059662a8",
    },
    name: {
      type: "string",
      example: "Town",
    },
    description: {
      type: "string",
      example: "Where the entity is located",
      nullable: true,
    },
    key: {
      type: "string",
      example: "kp_town",
    },
    value: {
      type: "string",
      example: "West-side Staines massive",
      nullable: true,
    },
  },
} as const;

export const $role = {
  type: "object",
  properties: {
    id: {
      type: "string",
    },
    key: {
      type: "string",
    },
    name: {
      type: "string",
    },
    description: {
      type: "string",
    },
  },
} as const;

export const $subscribers_subscriber = {
  type: "object",
  properties: {
    id: {
      type: "string",
    },
    email: {
      type: "string",
    },
    full_name: {
      type: "string",
    },
    first_name: {
      type: "string",
    },
    last_name: {
      type: "string",
    },
  },
} as const;

export const $subscriber = {
  type: "object",
  properties: {
    id: {
      type: "string",
    },
    preferred_email: {
      type: "string",
    },
    first_name: {
      type: "string",
    },
    last_name: {
      type: "string",
    },
  },
} as const;

export const $organization_user_role = {
  type: "object",
  properties: {
    id: {
      type: "string",
    },
    key: {
      type: "string",
    },
    name: {
      type: "string",
    },
  },
} as const;

export const $organization_user_role_permissions = {
  type: "object",
  properties: {
    id: {
      type: "string",
    },
    role: {
      type: "string",
    },
    permissions: {
      type: "object",
      properties: {
        key: {
          type: "string",
        },
      },
    },
  },
} as const;

export const $organization_user_permission = {
  type: "object",
  properties: {
    id: {
      type: "string",
    },
    key: {
      type: "string",
    },
    name: {
      type: "string",
    },
    description: {
      type: "string",
    },
    roles: {
      type: "array",
      items: {
        type: "object",
        properties: {
          id: {
            type: "string",
          },
          key: {
            type: "string",
          },
        },
      },
    },
  },
} as const;

export const $organization_users = {
  type: "array",
  items: {
    $ref: "#/components/schemas/organization_user",
  },
} as const;

export const $get_subscriber_response = {
  type: "object",
  properties: {
    code: {
      type: "string",
      description: "Response code.",
    },
    message: {
      type: "string",
      description: "Response message.",
    },
    subscribers: {
      type: "array",
      items: {
        $ref: "#/components/schemas/subscriber",
      },
    },
  },
} as const;

export const $get_subscribers_response = {
  type: "object",
  properties: {
    code: {
      type: "string",
      description: "Response code.",
    },
    message: {
      type: "string",
      description: "Response message.",
    },
    subscribers: {
      type: "array",
      items: {
        $ref: "#/components/schemas/subscribers_subscriber",
      },
    },
    next_token: {
      description: "Pagination token.",
      type: "string",
    },
  },
} as const;

export const $get_roles_response = {
  type: "object",
  properties: {
    code: {
      type: "string",
      description: "Response code.",
    },
    message: {
      type: "string",
      description: "Response message.",
    },
    roles: {
      type: "array",
      items: {
        $ref: "#/components/schemas/roles",
      },
    },
    next_token: {
      description: "Pagination token.",
      type: "string",
    },
  },
} as const;

export const $get_role_response = {
  type: "object",
  properties: {
    code: {
      type: "string",
      description: "Response code.",
    },
    message: {
      type: "string",
      description: "Response message.",
    },
    role: {
      type: "object",
      properties: {
        id: {
          type: "string",
          description: "The role's ID.",
          example: "01929904-316d-bb2c-069f-99dfea4ac394",
        },
        key: {
          type: "string",
          description: "The role identifier to use in code.",
          example: "admin",
        },
        name: {
          type: "string",
          description: "The role's name.",
          example: "Administrator",
        },
        description: {
          type: "string",
          description: "The role's description.",
          example: "Full access to all resources.",
        },
        is_default_role: {
          type: "boolean",
          description: "Whether the role is the default role.",
          example: false,
        },
      },
    },
  },
} as const;

export const $create_roles_response = {
  type: "object",
  properties: {
    code: {
      type: "string",
      description: "Response code.",
    },
    message: {
      type: "string",
      description: "Response message.",
    },
    role: {
      type: "object",
      properties: {
        id: {
          type: "string",
          description: "The role's ID.",
        },
      },
    },
  },
} as const;

export const $get_organizations_response = {
  type: "object",
  properties: {
    code: {
      type: "string",
      description: "Response code.",
      example: "OK",
    },
    message: {
      type: "string",
      description: "Response message.",
      example: "Success",
    },
    organizations: {
      type: "array",
      items: {
        $ref: "#/components/schemas/organization_item_schema",
      },
    },
    next_token: {
      description: "Pagination token.",
      type: "string",
      example: "Mjo5Om1hbWVfYZNj",
    },
  },
} as const;

export const $get_organization_users_response = {
  type: "object",
  properties: {
    code: {
      type: "string",
      description: "Response code.",
      example: "OK",
    },
    message: {
      type: "string",
      description: "Response message.",
      example: "Success",
    },
    organization_users: {
      type: "array",
      items: {
        $ref: "#/components/schemas/organization_user",
      },
    },
    next_token: {
      type: "string",
      description: "Pagination token.",
    },
  },
} as const;

export const $get_organizations_user_roles_response = {
  type: "object",
  properties: {
    code: {
      type: "string",
      description: "Response code.",
    },
    message: {
      type: "string",
      description: "Response message.",
    },
    roles: {
      type: "array",
      items: {
        $ref: "#/components/schemas/organization_user_role",
      },
    },
    next_token: {
      type: "string",
      description: "Pagination token.",
    },
  },
} as const;

export const $get_organizations_user_permissions_response = {
  type: "object",
  properties: {
    code: {
      type: "string",
      description: "Response code.",
    },
    message: {
      type: "string",
      description: "Response message.",
    },
    permissions: {
      type: "array",
      items: {
        $ref: "#/components/schemas/organization_user_permission",
      },
    },
  },
} as const;

export const $get_organization_feature_flags_response = {
  type: "object",
  properties: {
    code: {
      type: "string",
      description: "Response code.",
    },
    message: {
      type: "string",
      description: "Response message.",
    },
    feature_flags: {
      type: "object",
      description: "The environment's feature flag settings.",
      additionalProperties: {
        type: "object",
        properties: {
          type: {
            type: "string",
            enum: ["str", "int", "bool"],
          },
          value: {
            type: "string",
          },
        },
      },
    },
  },
} as const;

export const $get_environment_feature_flags_response = {
  type: "object",
  properties: {
    code: {
      type: "string",
      description: "Response code.",
    },
    message: {
      type: "string",
      description: "Response message.",
    },
    feature_flags: {
      type: "object",
      description: "The environment's feature flag settings.",
      additionalProperties: {
        type: "object",
        properties: {
          type: {
            type: "string",
            enum: ["str", "int", "bool"],
          },
          value: {
            type: "string",
          },
        },
      },
    },
    next_token: {
      type: "string",
      description: "Pagination token.",
    },
  },
} as const;

export const $add_organization_users_response = {
  type: "object",
  properties: {
    code: {
      type: "string",
      description: "Response code.",
    },
    message: {
      type: "string",
      description: "Response message.",
    },
    users_added: {
      type: "array",
      items: {
        type: "string",
      },
    },
  },
} as const;

export const $update_role_permissions_response = {
  type: "object",
  properties: {
    code: {
      type: "string",
    },
    message: {
      type: "string",
    },
    permissions_added: {
      type: "array",
      items: {
        type: "string",
      },
    },
    permissions_removed: {
      type: "array",
      items: {
        type: "string",
      },
    },
  },
} as const;

export const $update_organization_users_response = {
  type: "object",
  properties: {
    message: {
      type: "string",
    },
    users_added: {
      type: "array",
      items: {
        type: "string",
      },
    },
    users_updated: {
      type: "array",
      items: {
        type: "string",
      },
    },
    users_removed: {
      type: "array",
      items: {
        type: "string",
      },
    },
  },
} as const;

export const $connected_apps_auth_url = {
  type: "object",
  properties: {
    url: {
      type: "string",
      description:
        "A URL that is used to authenticate an end-user against a connected app.",
    },
    session_id: {
      type: "string",
      description: "A unique identifier for the login session.",
    },
  },
} as const;

export const $create_subscriber_success_response = {
  type: "object",
  properties: {
    subscriber: {
      type: "object",
      properties: {
        subscriber_id: {
          type: "string",
          description: "A unique identifier for the subscriber.",
        },
      },
    },
  },
} as const;

export const $connected_apps_access_token = {
  type: "object",
  properties: {
    access_token: {
      type: "string",
      description: "The access token to access a third-party provider.",
    },
    access_token_expiry: {
      type: "string",
      description: "The date and time that the access token expires.",
    },
  },
} as const;

export const $api_result = {
  type: "object",
  properties: {
    result: {
      type: "string",
      description: "The result of the api operation.",
    },
  },
} as const;

export const $create_application_response = {
  type: "object",
  properties: {
    code: {
      type: "string",
      description: "Response code.",
    },
    message: {
      type: "string",
      description: "Response message.",
    },
    application: {
      type: "object",
      properties: {
        id: {
          description: "The application's identifier.",
          type: "string",
          example: "3b0b5c6c8fcc464fab397f4969b5f482",
        },
        client_id: {
          description: "The application's client ID.",
          type: "string",
          example: "3b0b5c6c8fcc464fab397f4969b5f482",
        },
        client_secret: {
          description: "The application's client secret.",
          type: "string",
          example: "sUJSHI3ZQEVTJkx6hOxdOSHaLsZkCBRFLzTNOI791rX8mDjgt7LC",
        },
      },
    },
  },
} as const;

export const $get_application_response = {
  type: "object",
  properties: {
    code: {
      type: "string",
      description: "Response code.",
    },
    message: {
      type: "string",
      description: "Response message.",
    },
    application: {
      type: "object",
      properties: {
        id: {
          description: "The application's identifier.",
          type: "string",
          example: "3b0b5c6c8fcc464fab397f4969b5f482",
        },
        name: {
          description: "The application's name.",
          type: "string",
          example: "My React app",
        },
        type: {
          description: "The application's type.",
          type: "string",
          enum: ["m2m", "reg", "spa"],
        },
        client_id: {
          description: "The application's client ID.",
          type: "string",
          example: "3b0b5c6c8fcc464fab397f4969b5f482",
        },
        client_secret: {
          description: "The application's client secret.",
          type: "string",
          example: "sUJSHI3ZQEVTJkx6hOxdOSHaLsZkCBRFLzTNOI791rX8mDjgt7LC",
        },
        login_uri: {
          description: "The default login route for resolving session issues.",
          type: "string",
          example: "https://yourapp.com/api/auth/login",
        },
        homepage_uri: {
          description: "The homepage link to your application.",
          type: "string",
          example: "https://yourapp.com",
        },
        has_cancel_button: {
          description:
            "Whether the application has a cancel button to allow users to exit the auth flow [Beta].",
          type: "boolean",
          example: false,
        },
      },
    },
  },
} as const;

export const $applications = {
  type: "object",
  properties: {
    id: {
      type: "string",
    },
    name: {
      type: "string",
    },
    type: {
      type: "string",
    },
  },
} as const;

export const $get_applications_response = {
  type: "object",
  properties: {
    code: {
      type: "string",
      description: "Response code.",
    },
    message: {
      type: "string",
      description: "Response message.",
    },
    applications: {
      type: "array",
      items: {
        $ref: "#/components/schemas/applications",
      },
    },
    next_token: {
      description: "Pagination token.",
      type: "string",
    },
  },
} as const;

export const $redirect_callback_urls = {
  type: "object",
  properties: {
    redirect_urls: {
      type: "array",
      description: "An application's redirect URLs.",
      items: {
        type: "string",
      },
    },
  },
} as const;

export const $get_redirect_callback_urls_response = {
  type: "object",
  properties: {
    redirect_urls: {
      description: "An application's redirect callback URLs.",
      type: "array",
      items: {
        $ref: "#/components/schemas/redirect_callback_urls",
      },
    },
  },
} as const;

export const $logout_redirect_urls = {
  type: "object",
  properties: {
    logout_urls: {
      type: "array",
      description: "An application's logout URLs.",
      items: {
        type: "string",
      },
    },
    code: {
      type: "string",
      description: "Response code.",
      example: "OK",
    },
    message: {
      type: "string",
      description: "Response message.",
      example: "Success",
    },
  },
} as const;

export const $get_permissions_response = {
  type: "object",
  properties: {
    code: {
      type: "string",
      description: "Response code.",
    },
    message: {
      type: "string",
      description: "Response message.",
    },
    permissions: {
      type: "array",
      items: {
        $ref: "#/components/schemas/permissions",
      },
    },
    next_token: {
      type: "string",
      description: "Pagination token.",
    },
  },
} as const;

export const $permissions = {
  type: "object",
  properties: {
    id: {
      type: "string",
      description: "The permission's ID.",
    },
    key: {
      type: "string",
      description: "The permission identifier to use in code.",
    },
    name: {
      type: "string",
      description: "The permission's name.",
    },
    description: {
      type: "string",
      description: "The permission's description.",
    },
  },
} as const;

export const $roles = {
  type: "object",
  properties: {
    id: {
      type: "string",
      description: "The role's ID.",
    },
    key: {
      type: "string",
      description: "The role identifier to use in code.",
    },
    name: {
      type: "string",
      description: "The role's name.",
    },
    description: {
      type: "string",
      description: "The role's description.",
      nullable: true,
    },
    is_default_role: {
      type: "boolean",
      description: "Whether the role is the default role.",
    },
  },
} as const;

export const $role_permissions_response = {
  type: "object",
  properties: {
    code: {
      type: "string",
      description: "Response code.",
    },
    message: {
      type: "string",
      description: "Response message.",
    },
    permissions: {
      type: "array",
      items: {
        $ref: "#/components/schemas/permissions",
      },
    },
    next_token: {
      type: "string",
      description: "Pagination token.",
    },
  },
} as const;

export const $user_profile_v2 = {
  type: "object",
  properties: {
    sub: {
      type: "string",
      description: "Unique ID of the user in Kinde.",
      example: "kp_c3143a4b50ad43c88e541d9077681782",
    },
    provided_id: {
      type: "string",
      description:
        "Value of the user's ID in a third-party system when the user is imported into Kinde.",
      example: "some_external_id",
      nullable: true,
    },
    name: {
      type: "string",
      description: "User's first and last name separated by a space.",
      example: "John Snow",
    },
    given_name: {
      type: "string",
      description: "User's first name.",
      example: "John",
    },
    family_name: {
      type: "string",
      description: "User's last name.",
      example: "Snow",
    },
    updated_at: {
      type: "integer",
      description: "Date the user was last updated at (In Unix time).",
      example: 1612345678,
    },
    email: {
      type: "string",
      description: "User's email address if available.",
      example: "john.snow@example.com",
    },
    email_verified: {
      type: "boolean",
      description: "Whether the user's email address has been verified.",
      example: true,
    },
    picture: {
      type: "string",
      description: "URL that point's to the user's picture or avatar",
      example: "https://example.com/john_snow.jpg",
      nullable: true,
    },
    preferred_username: {
      type: "string",
      description: "User's preferred username.",
      example: "john_snow",
      nullable: true,
    },
    id: {
      type: "string",
      description: "Unique ID of the user in Kinde",
      example: "kp_c3143a4b50ad43c88e541d9077681782",
    },
  },
} as const;

export const $token_introspect = {
  type: "object",
  properties: {
    active: {
      type: "boolean",
      description: "Indicates the status of the token.",
    },
    aud: {
      type: "array",
      description: "Array of intended token recipients.",
      items: {
        type: "string",
        example: "https://api.example.com/v1",
      },
    },
    client_id: {
      type: "string",
      description: "Identifier for the requesting client.",
      example: "3b0b5c6c8fcc464fab397f4969b5f482",
    },
    exp: {
      type: "integer",
      description: "Token expiration timestamp.",
      example: 1612345678,
    },
    iat: {
      type: "integer",
      description: "Token issuance timestamp.",
      example: 1612345678,
    },
  },
} as const;

export const $token_error_response = {
  type: "object",
  properties: {
    error: {
      type: "string",
      description: "Error.",
    },
    error_description: {
      type: "string",
      description: "The error description.",
    },
  },
} as const;
